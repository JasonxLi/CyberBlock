{"version":3,"sources":["components/Icons/Icons.js","components/Layout/index.js","components/Layout/Layout.js","context/ContextProvider.js","components/ShuffleTeam/ShuffleTeam.js","components/HostConfiguration/HostConfiguration.js","components/GameScore/GameScore.js","components/TriviaBoard/TriviaBoard.js","components/TriviaInterface/TriviaInterface.js","components/BoughtDefensesBoard/index.js","components/BoughtDefensesBoard/BoughtDefensesBoard.js","components/Timer/Timer.js","components/GameInterface/GameInterface.js","components/DefenseBoard/DefenseBoard.js","components/HostInterface/HostInterface.js","components/BuyingInterface/BuyingInterface.js","components/PlayerInformation/PlayerInformation.js","components/GameScore/index.js","components/PlayerInterface/PlayerInterface.js","components/LobbyInterface/LobbyInterface.js","components/ChatInterface/ChatInterface.js","App.js","reportWebVitals.js","index.js"],"names":["MedtronicsIcon","width","height","viewBox","xmlns","d","fill","Layout","children","Box","sx","overflow","positon","p","Divider","socket","io","connect","Context","createContext","ThemeContextProvider","useState","gameStage","setGameStage","nbOfTeams","setNbOfTeams","nbOfRounds","setNbOfRounds","timeForEachRound","setTimeForEachRound","hasTriviaRound","setHasTriviaRound","difficulty","setDifficulty","nbOfDefenses","setNbOfDefenses","isHost","setIsHost","isInLobby","setIsInLobby","alias","setAlias","lobbyId","setLobbyId","teamInfo","setTeamInfo","myTeamId","setMyTeamId","isTeamLeader","setIsTeamLeader","triviaQuestion","setTriviaQuestion","triviaAnswer","setTriviaAnswer","hasSubmittedTrivia","setHasSubmittedTrivia","submittedTriviaAnswers","setSubmittedTriviaAnswers","roundCount","setRoundCount","userEarnings","setUserEarnings","userDefenses","setUserDefenses","selectedDefenses","setSelectedDefenses","boughtDefenses","setBoughtDefenses","rolledAttack","setRolledAttack","scores","setScores","defensesToSubmit","setDefensesToSubmit","bestDefenses","setBestDefenses","playedDefenses","setPlayedDefenses","hasSubmittedDefenses","setHasSubmittedDefenses","resetTimer","setResetTimer","chatMessagesAll","setChatMessagesAll","chatMessagesTeam","setChatMessagesTeam","hideTeamChat","setHideTeamChat","hideAllChat","setHideAllChat","useEffect","on","info","defenses","attack","message","removeAllListeners","Array","parseInt","forEach","team","index","student","id","socketId","avgTurn","Math","ceil","length","i","myLeaderStartTurn","myLeaderEndTurn","emit","Provider","value","host_create_lobby","student_join_lobby","host_move_student","oldTeamId","newTeamId","host_start_game","host_gets_trivia_question","newTriviaQuestion","student_submit_trivia_answer","teamId","triviaReward","host_ends_trivia_round","student_buy_defenses","host_start_next_defense_round","host_end_game","student_play_defenses","attackId","AttackID","chat_sendToAll","chat_sendToTeam","ShuffleTeam","useContext","TableContainer","Table","minWidth","TableHead","TableRow","TableCell","align","map","item","TableBody","component","scope","child","FormControl","fullWidth","InputLabel","Select","label","onChange","event","target","MenuItem","HostConfiguration","m","maxWidth","Input","type","placeholder","labelId","Button","variant","onClick","GameScore","score","style","TriviaBoard","Answer","answer","TriviaInterface","boxStyling","Typography","Question","Option1","Option2","Option3","Option4","ButtonGroup","disabled","BoughtDefensesBoard","defense","defenseName","Timer","initialSeconds","seconds","setSeconds","myInterval","setInterval","clearInterval","GameInterface","count","setCount","Grid","container","justifyContent","Card","CardContent","Tooltip","title","Description","color","gutterBottom","Name","spacing","size","defenseID","tempDefense","slice","handleChange","DefenseBoard","bestDefense","eachTeamsPlayedDefenses","playedDefense","HostInterface","allDoneBuyingDefenses","setAllDoneBuyingDefenses","React","aTeamIsNotDone","handleStartGame","textAlign","BuyingInterface","isChecked","setIsChecked","getUserDefense","name","cost","currentIndex","tempIndex","tempDefenseList","removeDefense","defenseCost","done","row","FormGroup","FormControlLabel","control","Checkbox","checked","DefenseID","fontStyle","PlayerInfromation","PlayerInterface","PlayerInformation","LobbyInterFace","border","borderRadius","position","top","left","transform","trim","ChatInterface","textTeam","setTextTeam","textAll","setTextAll","messagesEndRef","createRef","scrollToBottom","current","scrollIntoView","behavior","xs","List","maxHeight","chatMessage","ListItemText","primary","ref","TextField","e","App","TitleText","withStyles","root","fontWeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.685bbc0b.chunk.js","sourcesContent":["import { Icon } from \"@material-ui/core\";\r\n\r\n//exporting the medtronics icon svg\r\nexport const MedtronicsIcon = () => {\r\n\treturn (\r\n\t\t<svg\r\n\t\t\twidth=\"150px\"\r\n\t\t\theight=\"50px\"\r\n\t\t\tviewBox=\"0 0 35 15 \"\r\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t>\r\n\t\t\t<path\r\n\t\t\t\td=\"m8.884 3.295c-.047-.582-.35-.923-.962-.923-.565 0-.914.357-.976.923zm.914.217c0 .186-.015.38-.046.535h-2.79c.1.465.495.752 1.24.752h.01l.007-.001a3.128 3.128 0 0 0 .212-.01l.058-.004a2.7 2.7 0 0 0 .874-.241l.064-.031c.055-.028.108-.058.16-.089h.024v.785c-.408.247-.887.39-1.4.39v-.003l-.055.002c-1.404 0-2.171-.798-2.171-1.961 0-1.248.79-2.07 1.938-2.07s1.876.814 1.876 1.946m-9.667 2.007h.954l.178-3.34.039-.907h.015l.202.907.775 3.34h1.195l.783-3.34.193-.907h.016l.039.907.186 3.34h.992l-.327-5.348h-1.58l-.714 3.21-.155.813h-.015l-.163-.814-.713-3.209h-1.582zm16.41.078c-.89 0-1.395-.41-1.395-1.34v-1.83h-1.07v1.945c0 .287.11.403.342.403.054 0 .116 0 .186-.015h.023v.76a2.082 2.082 0 0 1 -.418.046c-.528 0-.853-.201-.993-.643-.279.434-.72.674-1.27.674-.985 0-1.784-.767-1.784-2.023 0-1.24.799-2.008 1.783-2.008.488 0 .892.186 1.17.527v-1.922h.962v1.473h1.07v-.924h.96v.923h1.032v.783h-1.031v1.784c0 .387.193.573.566.573.17 0 .286-.015.441-.054h.024v.79a2.625 2.625 0 0 1 -.597.078m-4.395-.814c.65 0 1.015-.503 1.015-1.209 0-.698-.364-1.202-1.015-1.202-.66 0-1 .504-1 1.202 0 .706.34 1.21 1 1.21m6.38-1.295c0-.628.325-.977.945-.977.108 0 .225.015.333.047h.016v-.9a1.087 1.087 0 0 0 -.38-.062c-.465 0-.775.287-.954.752v-.705h-.922v3.876h.961zm3.348 2.108c-1.217 0-2.039-.884-2.039-2.015s.822-2.016 2.04-2.016c1.208 0 2.03.884 2.03 2.016s-.822 2.015-2.03 2.015m0-.83c.689 0 1.045-.503 1.045-1.185s-.356-1.186-1.046-1.186c-.674 0-1.054.503-1.054 1.186s.38 1.186 1.054 1.186m3.506-1.411c0-.597.302-.985.86-.985.55 0 .807.365.807.985v2.163h.96v-2.202c0-.93-.48-1.752-1.526-1.752-.558 0-.93.28-1.14.698v-.62h-.922v3.876h.961zm4.325-2.659c0 .31-.248.574-.573.574a.57.57 0 1 1 .573-.574m.536 4.822a2.392 2.392 0 0 1 -.473.054c-.737 0-1.132-.388-1.132-1.1v-2.83h.969v2.76c0 .255.124.38.388.38.061 0 .139-.009.224-.024h.024zm.092-1.938c0-1.132.822-2.016 2.047-2.016.349 0 .744.086 1.039.248v.853h-.024a1.8 1.8 0 0 0 -.945-.264c-.737 0-1.132.504-1.132 1.179s.395 1.178 1.132 1.178a1.8 1.8 0 0 0 .945-.264h.024v.853c-.295.163-.69.248-1.04.248-1.224 0-2.046-.884-2.046-2.015\"\r\n\t\t\t\tfill=\"#224a87\"\r\n\t\t\t/>\r\n\t\t</svg>\r\n\t);\r\n};\r\n","import Layout from \"./Layout\";\r\nexport default Layout;","import * as React from \"react\";\r\nimport { Box, Divider } from \"@material-ui/core\";\r\nimport { MedtronicsIcon } from \"../Icons/Icons\";\r\n\r\n// layout for all the interfaces\r\nconst Layout = ({ children }) => {\r\n\tconst base = {\r\n\t\tp: \"2rem\",\r\n\t};\r\n\tconst layoutStyling = {\r\n\t\toverflow: \"auto\",\r\n\t\tpositon: \"relative\",\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Box sx={layoutStyling}>\r\n\t\t\t<Box sx={base}>\r\n\t\t\t\t<MedtronicsIcon />\r\n\t\t\t\t<Divider />\r\n\t\t\t</Box>\r\n\r\n\t\t\t{children}\r\n\t\t</Box>\r\n\t);\r\n};\r\nexport default Layout;\r\n","import React, { createContext, useState, useEffect, useContext } from \"react\";\r\n\r\nimport io from 'socket.io-client'\r\nconst socket = io.connect(\"https://cyberblock.herokuapp.com/\");\r\n\r\nexport const Context = createContext({});\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n\r\n\tconst [gameStage, setGameStage] = useState('CONFIG');\r\n\r\n\tconst [nbOfTeams, setNbOfTeams] = useState(2);\r\n\tconst [nbOfRounds, setNbOfRounds] = useState(5);\r\n\tconst [timeForEachRound, setTimeForEachRound] = useState(120);\r\n\tconst [hasTriviaRound, setHasTriviaRound] = useState(true);\r\n\tconst [difficulty, setDifficulty] = useState(1);\r\n\t//TODO \r\n\tconst [nbOfDefenses, setNbOfDefenses] = useState(2);\r\n\r\n\t// a state that decides whether a player is host or student ans puts them in a correct interface\r\n\tconst [isHost, setIsHost] = useState(false);\r\n\t// a state to see if users are in the set lobby or not\r\n\tconst [isInLobby, setIsInLobby] = useState(false);\r\n\t//a state that holds the alias of each player that joined\r\n\tconst [alias, setAlias] = useState(\"\");\r\n\t//state that hold the lobbyId created by the host\r\n\tconst [lobbyId, setLobbyId] = useState(\"\");\r\n\t// a state to store all team information once student joins and host moves the players\r\n\tconst [teamInfo, setTeamInfo] = useState([]);\r\n\tconst [myTeamId, setMyTeamId] = useState(-1);\r\n\tconst [isTeamLeader, setIsTeamLeader] = useState(false);\r\n\r\n\t//a state to hold trivia questions\r\n\tconst [triviaQuestion, setTriviaQuestion] = useState();\r\n\tconst [triviaAnswer, setTriviaAnswer] = useState();\r\n\tconst [hasSubmittedTrivia, setHasSubmittedTrivia] = useState(false);\r\n\tconst [submittedTriviaAnswers, setSubmittedTriviaAnswers] = useState([]);\r\n\r\n\t// a state to store the current round in the game\r\n\tconst [roundCount, setRoundCount] = useState(0);\r\n\t// a state that handles user earning in the buying state\r\n\tconst [userEarnings, setUserEarnings] = useState(40);\r\n\t// a state to store all the user defense obtained from the database\r\n\tconst [userDefenses, setUserDefenses] = useState([]);\r\n\t// state that holds the user selected defense in the buying phase\r\n\tconst [selectedDefenses, setSelectedDefenses] = useState([]);\r\n\tconst [boughtDefenses, setBoughtDefenses] = useState([]);\r\n\r\n\r\n\t//state that holds the attack rolled by the host\r\n\tconst [rolledAttack, setRolledAttack] = useState(\"\");\r\n\t//a state to hold scores for each team\r\n\tconst [scores, setScores] = useState([]);\r\n\r\n\tconst [defensesToSubmit, setDefensesToSubmit] = useState([]);\r\n\tconst [bestDefenses, setBestDefenses] = useState([]);\r\n\tconst [playedDefenses, setPlayedDefenses] = useState([]);\r\n\tconst [hasSubmittedDefenses, setHasSubmittedDefenses] = useState(false);\r\n\r\n\r\n\tconst [resetTimer, setResetTimer] = useState(false);\r\n\r\n\t// Context for Chat Box\r\n\t// All chat messages\r\n\tconst [chatMessagesAll, setChatMessagesAll] = useState([]);\r\n\t// Team chat messages\r\n\tconst [chatMessagesTeam, setChatMessagesTeam] = useState([]);\r\n\tconst [hideTeamChat, setHideTeamChat] = useState(true);\r\n\tconst [hideAllChat, setHideAllChat] = useState(true);\r\n\r\n\t//recalls all the socket events each time the socket changes to retrive the infromation from the server\r\n\tuseEffect(() => {\r\n\t\tsocket.on(\"new_student_joined_lobby\", (info) => {\r\n\t\t\tsetTeamInfo(info);\r\n\t\t});\r\n\t\tsocket.on(\"host_moved_student\", (info) => {\r\n\t\t\tsetTeamInfo(info);\r\n\t\t});\r\n\r\n\t\tsocket.on(\"host_started_game\", (hasTriviaRound) => {\r\n\t\t\tif (hasTriviaRound) {\r\n\t\t\t\tsetGameStage('TRIVIA');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsetGameStage('BUY_DEFENSE');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsocket.on(\"host_ended_trivia_round\", () => {\r\n\t\t\tsetGameStage('BUY_DEFENSE');\r\n\t\t});\r\n\r\n\t\tsocket.on(\"student_receives_trivia_question\", (triviaQuestion) => {\r\n\t\t\tsetTriviaQuestion(triviaQuestion);\r\n\t\t\tsetSubmittedTriviaAnswers([]);\r\n\t\t\tsetHasSubmittedTrivia(false);\r\n\t\t});\r\n\r\n\t\tsocket.on(\"student_submitted_trivia_answer\", (submittedTriviaAnswers) => {\r\n\t\t\tsetSubmittedTriviaAnswers(submittedTriviaAnswers);\r\n\t\t});\r\n\r\n\t\tsocket.on(\"student_receive_defenses\", (defenses) => {\r\n\t\t\tsetUserDefenses(defenses);\r\n\t\t});\r\n\r\n\t\tsocket.on(\"student_bought_defenses\", (boughtDefenses) => {\r\n\t\t\tsetBoughtDefenses(boughtDefenses);\r\n\t\t})\r\n\r\n\t\tsocket.on(\"student_receive_attack\", ({ attack, playedDefenses }) => {\r\n\t\t\tsetResetTimer(true);\r\n\t\t\tsetRoundCount(roundCount => roundCount + 1);\r\n\t\t\tsetRolledAttack(attack);\r\n\t\t\tsetGameStage(\"DEFEND_ATTACK\");\r\n\t\t\tsetHasSubmittedDefenses(false);\r\n\t\t\tsetBestDefenses([]);\r\n\t\t\tsetPlayedDefenses(playedDefenses);\r\n\t\t})\r\n\r\n\t\tsocket.on(\"host_ended_game\", () => {\r\n\t\t\tsetGameStage(\"GAME_END\");\r\n\t\t})\r\n\r\n\t\tsocket.on(\"student_played_defenses\", ({ scores, bestDefenses, playedDefenses }) => {\r\n\t\t\tsetScores(scores);\r\n\t\t\tsetBestDefenses(bestDefenses);\r\n\t\t\tsetPlayedDefenses(playedDefenses);\r\n\t\t})\r\n\r\n\t\tsocket.on(\"chat_receiveFromAll\", ({ alias, message }) => {\r\n\t\t\tsetChatMessagesAll(chatMessagesAll => [...chatMessagesAll, { alias, message }]);\r\n\t\t})\r\n\r\n\t\tsocket.on(\"chat_receiveFromTeam\", ({ alias, message }) => {\r\n\t\t\tsetChatMessagesTeam(chatMessagesTeam => [...chatMessagesTeam, { alias, message }]);\r\n\t\t})\r\n\r\n\t\treturn () => {\r\n\t\t\tsocket.removeAllListeners();\r\n\t\t}\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetScores(Array(parseInt(nbOfTeams)).fill(0));\r\n\t\tsetPlayedDefenses(Array(parseInt(nbOfTeams)).fill([]));\r\n\t}, [nbOfTeams]);\r\n\r\n\tuseEffect(() => {\r\n\t\tteamInfo.forEach((team, index) => {\r\n\t\t\tteam.forEach((student) => {\r\n\t\t\t\tif (socket.id === student.socketId) {\r\n\t\t\t\t\tsetMyTeamId(index);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}, [teamInfo]);\r\n\r\n\tuseEffect(() => {\r\n\t\t//after changing team or changing round, it sets isTeamLeader to true or vice versa.\r\n\t\tif (teamInfo[myTeamId]) {\r\n\t\t\tconst avgTurn = Math.ceil(parseInt(nbOfRounds) / teamInfo[myTeamId].length);\r\n\t\t\tfor (let i = 0; i < teamInfo[myTeamId].length; i++) {\r\n\t\t\t\tif (socket.id === teamInfo[myTeamId][i].socketId) {\r\n\t\t\t\t\tlet myLeaderStartTurn = i * avgTurn;\r\n\t\t\t\t\tlet myLeaderEndTurn = (i + 1) * avgTurn;\r\n\r\n\t\t\t\t\tif (roundCount === 0 && myLeaderStartTurn === 0) {\r\n\t\t\t\t\t\tsetIsTeamLeader(true);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (myLeaderStartTurn < roundCount && roundCount <= myLeaderEndTurn) {\r\n\t\t\t\t\t\tsetIsTeamLeader(true);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tsetIsTeamLeader(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}, [teamInfo, myTeamId, roundCount]);\r\n\r\n\t//this is a workaround for the socket.on not reading real-time value bug\r\n\tuseEffect(() => {\r\n\t\tif ((!isHost) && (gameStage === 'TRIVIA' || gameStage === ' BUY_DEFENSE')) {\r\n\t\t\tsetHideTeamChat(false);\r\n\t\t}\r\n\t\tif (gameStage === 'BUY_DEFENSE') {\r\n\t\t\tsocket.emit(\"host_start_buy_phase\", lobbyId);\r\n\t\t}\r\n\t}, [gameStage]);\r\n\r\n\tuseEffect(() => {\r\n\t\tboughtDefenses.forEach((defenses, index) => {\r\n\t\t\tif (myTeamId == index) {\r\n\t\t\t\tsetSelectedDefenses(defenses);\r\n\t\t\t}\r\n\t\t})\r\n\t}, [boughtDefenses]);\r\n\r\n\t//Start-------------Lobby Events------------Start//\r\n\tconst host_create_lobby = () => {\r\n\t\tsocket.emit(\r\n\t\t\t\"host_create_lobby\",\r\n\t\t\t{\r\n\t\t\t\tnbOfTeams,\r\n\t\t\t\tnbOfRounds,\r\n\t\t\t\tnbOfDefenses,\r\n\t\t\t\ttimeForEachRound,\r\n\t\t\t\tuserEarnings,\r\n\t\t\t\thasTriviaRound,\r\n\t\t\t\tdifficulty,\r\n\t\t\t},\r\n\t\t\t(lobbyId) => {\r\n\t\t\t\tsetLobbyId(lobbyId);\r\n\t\t\t}\r\n\t\t);\r\n\t\tsetHideAllChat(false);\r\n\t};\r\n\r\n\tconst student_join_lobby = () => {\r\n\t\tif (lobbyId !== \"\" && alias !== \"\") {\r\n\t\t\tsocket.emit(\r\n\t\t\t\t\"student_join_lobby\",\r\n\t\t\t\t{ lobbyId, alias },\r\n\t\t\t\t({\r\n\t\t\t\t\tnbOfTeams,\r\n\t\t\t\t\tnbOfRounds,\r\n\t\t\t\t\tnbOfDefenses,\r\n\t\t\t\t\ttimeForEachRound,\r\n\t\t\t\t\tuserEarnings,\r\n\t\t\t\t\thasTriviaRound,\r\n\t\t\t\t\tdifficulty,\r\n\t\t\t\t\tteamInfo,\r\n\t\t\t\t}) => {\r\n\t\t\t\t\tsetNbOfTeams(nbOfTeams);\r\n\t\t\t\t\tsetNbOfRounds(nbOfRounds);\r\n\t\t\t\t\tsetNbOfDefenses(nbOfDefenses);\r\n\t\t\t\t\tsetTimeForEachRound(timeForEachRound);\r\n\t\t\t\t\tsetUserEarnings(parseInt(userEarnings));\r\n\t\t\t\t\tsetHasTriviaRound(hasTriviaRound);\r\n\t\t\t\t\tsetDifficulty(difficulty);\r\n\t\t\t\t\tsetTeamInfo(teamInfo);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tsetHideAllChat(false);\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tconst host_start_game = () => {\r\n\t\tsocket.emit(\"host_start_game\", lobbyId);\r\n\t}\r\n\r\n\tconst host_move_student = (lobbyId, socketId, oldTeamId, newTeamId) => {\r\n\t\tsocket.emit(\"host_move_student\", {\r\n\t\t\tlobbyId,\r\n\t\t\tsocketId,\r\n\t\t\toldTeamId,\r\n\t\t\tnewTeamId,\r\n\t\t});\r\n\t};\r\n\t//End-------------Lobby Events------------End//\r\n\r\n\t//Start-------------Trivia Events------------Start//\r\n\tconst host_gets_trivia_question = () => {\r\n\t\tsocket.emit(\"host_gets_trivia_question\", lobbyId, (newTriviaQuestion) => {\r\n\t\t\tsetTriviaQuestion(newTriviaQuestion);\r\n\t\t});\r\n\t};\r\n\r\n\tconst student_submit_trivia_answer = () => {\r\n\t\tsocket.emit(\r\n\t\t\t\"student_submit_trivia_answer\",\r\n\t\t\t{ lobbyId, teamId: myTeamId, triviaAnswer },\r\n\t\t\t({ triviaReward }) => {\r\n\t\t\t\tsetUserEarnings(userEarnings => userEarnings + triviaReward);\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\tconst host_ends_trivia_round = () => {\r\n\t\tsocket.emit(\"host_ends_trivia_round\", lobbyId);\r\n\t};\r\n\t//End-------------Trivia Events------------End//\r\n\r\n\tconst student_buy_defenses = () => {\r\n\t\tsocket.emit(\"student_buy_defenses\", ({ lobbyId, teamId: myTeamId, defenses: selectedDefenses }));\r\n\t}\r\n\r\n\tconst host_start_next_defense_round = () => {\r\n\t\tsocket.emit(\"host_start_next_defense_round\", lobbyId);\r\n\t}\r\n\r\n\tconst host_end_game = () => {\r\n\t\tsocket.emit(\"host_end_game\", lobbyId);\r\n\t}\r\n\r\n\tconst student_play_defenses = () => {\r\n\t\tsocket.emit(\"student_play_defenses\", { lobbyId: lobbyId, teamId: myTeamId, defenses: defensesToSubmit, attackId: rolledAttack.AttackID });\r\n\t}\r\n\r\n\tconst chat_sendToAll = (message) => {\r\n\t\tsocket.emit(\"chat_sendToAll\", ({ lobbyId, alias, message }));\r\n\t}\r\n\r\n\tconst chat_sendToTeam = (message) => {\r\n\t\tsocket.emit(\"chat_sendToTeam\", ({ lobbyId, alias, teamId: myTeamId, message }))\r\n\t}\r\n\r\n\t// providing access to these value to all the interfaces\r\n\treturn (\r\n\t\t<Context.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tgameStage, setGameStage,\r\n\r\n\t\t\t\t//lobby configuration\r\n\t\t\t\tisHost, setIsHost,\r\n\t\t\t\tisInLobby, setIsInLobby,\r\n\t\t\t\talias, setAlias,\r\n\t\t\t\tlobbyId, setLobbyId,\r\n\t\t\t\tnbOfTeams, setNbOfTeams,\r\n\t\t\t\tnbOfRounds, setNbOfRounds,\r\n\t\t\t\ttimeForEachRound, setTimeForEachRound,\r\n\t\t\t\tuserEarnings, setUserEarnings,\r\n\t\t\t\thasTriviaRound, setHasTriviaRound,\r\n\t\t\t\tdifficulty, setDifficulty,\r\n\r\n\t\t\t\t//lobby waiting page\r\n\t\t\t\tteamInfo, setTeamInfo,\r\n\t\t\t\troundCount, setRoundCount,\r\n\t\t\t\tmyTeamId, setMyTeamId,\r\n\t\t\t\tisTeamLeader, setIsTeamLeader,\r\n\r\n\t\t\t\t//trivia page\r\n\t\t\t\ttriviaQuestion, setTriviaQuestion,\r\n\t\t\t\ttriviaAnswer, setTriviaAnswer,\r\n\t\t\t\thasSubmittedTrivia, setHasSubmittedTrivia,\r\n\t\t\t\tsubmittedTriviaAnswers, setSubmittedTriviaAnswers,\r\n\r\n\t\t\t\t//buy defenses\r\n\t\t\t\tuserDefenses, setUserDefenses,\r\n\t\t\t\tselectedDefenses, setSelectedDefenses,\r\n\t\t\t\tboughtDefenses, setBoughtDefenses,\r\n\r\n\t\t\t\t//actual gameplay\r\n\t\t\t\trolledAttack, setRolledAttack,\r\n\t\t\t\tscores, setScores,\r\n\t\t\t\tdefensesToSubmit, setDefensesToSubmit,\r\n\t\t\t\tbestDefenses, setBestDefenses,\r\n\t\t\t\tplayedDefenses, setPlayedDefenses,\r\n\t\t\t\thasSubmittedDefenses, setHasSubmittedDefenses,\r\n\t\t\t\tresetTimer, setResetTimer,\r\n\r\n\t\t\t\tchatMessagesTeam, setChatMessagesTeam,\r\n\t\t\t\tchatMessagesAll, setChatMessagesAll,\r\n\t\t\t\thideTeamChat, setHideTeamChat,\r\n\t\t\t\thideAllChat, setHideAllChat,\r\n\r\n\t\t\t\t//socket events\r\n\t\t\t\thost_create_lobby, student_join_lobby, host_move_student,\r\n\t\t\t\thost_start_game,\r\n\t\t\t\thost_gets_trivia_question, student_submit_trivia_answer, host_ends_trivia_round,\r\n\t\t\t\tstudent_buy_defenses,\r\n\t\t\t\thost_start_next_defense_round, host_end_game,\r\n\t\t\t\tstudent_play_defenses,\r\n\t\t\t\tchat_sendToAll, chat_sendToTeam\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</Context.Provider>\r\n\t);\r\n};\r\nexport default ThemeContextProvider;\r\n","import * as React from \"react\";\r\nimport {\r\n\tBox,\r\n\tTableContainer,\r\n\tTable,\r\n\tTableBody,\r\n\tTableRow,\r\n\tTableCell,\r\n\tTableHead,\r\n\tFormControl,\r\n\tInputLabel,\r\n\tSelect,\r\n\tMenuItem,\r\n} from \"@material-ui/core\";\r\nimport { useContext } from \"react\";\r\nimport { Context } from \"../../context/ContextProvider\";\r\n\r\n//the page is for the host specifically to changes the team members from each team\r\nconst ShuffleTeam = ({ children }) => {\r\n\t//shared states\r\n\tconst { teamInfo, host_move_student, lobbyId } = useContext(Context);\r\n\r\n\t// when the host changes the team of each player call the host_moved_student event\r\n\tconst handleChange = (newTeamId, socketId, oldTeamId) => {\r\n\t\thost_move_student(lobbyId, socketId, oldTeamId, newTeamId);\r\n\t};\r\n\treturn (\r\n\t\t<Box>\r\n\t\t\t<TableContainer>\r\n\t\t\t\t<Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\r\n\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t<TableCell>Team</TableCell>\r\n\t\t\t\t\t\t\t<TableCell align=\"right\" sx={{ minWidth: 300 }}>\r\n\t\t\t\t\t\t\t\tMembers\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t{teamInfo.map((item, index) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t<TableRow key={index + 1}>\r\n\t\t\t\t\t\t\t\t\t<TableCell component=\"th\" scope=\"child\">\r\n\t\t\t\t\t\t\t\t\t\tTeam {index + 1}\r\n\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t{item.map((child) => {\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"right\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t{child.alias}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t<FormControl fullWidth>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<InputLabel id=\"select-label-round\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSwitch\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Round\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChange(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tevent.target.value,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchild.socketId,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{teamInfo.map((item, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem value={index}>{index + 1}</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</Table>\r\n\t\t\t</TableContainer>\r\n\t\t</Box>\r\n\t);\r\n};\r\nexport default ShuffleTeam;\r\n","import * as React from \"react\";\r\nimport {\r\n\tBox,\r\n\tFormControl,\r\n\tInputLabel,\r\n\tSelect,\r\n\tMenuItem,\r\n\tButton,\r\n\tInput,\r\n} from \"@material-ui/core\";\r\nimport { useState, useContext } from \"react\";\r\nimport { Context } from \"../../context/ContextProvider\";\r\n\r\n// page to allow the host to add configurations to the game\r\nconst HostConfiguration = ({ children }) => {\r\n\t// shared states\r\n\tconst {\r\n\t\tsetGameStage,\r\n\t\tsetNbOfTeams, setNbOfRounds, setTimeForEachRound, setUserEarnings,\r\n\t\thasTriviaRound, setHasTriviaRound, difficulty, setDifficulty,\r\n\t\thost_create_lobby\r\n\t} = useContext(Context);\r\n\r\n\tconst formControlBox = {\r\n\t\tm: \"20px\",\r\n\t\tp: \"10px\",\r\n\t\tmaxWidth: 500,\r\n\t};\r\n\t// handles the submission of the configuration by calling the create lobby event\r\n\tconst handleOnClick = () => {\r\n\t\t//changes to the next interface\r\n\t\tsetGameStage('WAITING');\r\n\t\thost_create_lobby();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Box sx={formControlBox}>\r\n\t\t\t<Input\r\n\t\t\t\tfullWidth\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Enter Number of teams\"\r\n\t\t\t\tonChange={(event) => setNbOfTeams(event.target.value)}\r\n\t\t\t/>\r\n\t\t\t<br /> <br />\r\n\t\t\t<Input\r\n\t\t\t\tfullWidth\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Enter Number of Rounds\"\r\n\t\t\t\tonChange={(event) => setNbOfRounds(event.target.value)}\r\n\t\t\t/>\r\n\r\n\t\t\t<br /> <br />\r\n\t\t\t<Input\r\n\t\t\t\tfullWidth\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Enter Time Allowed For Each Round (in seconds)\"\r\n\t\t\t\tonChange={(event) => setTimeForEachRound(event.target.value)}\r\n\t\t\t/>\r\n\t\t\t<br /><br />\r\n\t\t\t<Input\r\n\t\t\t\tfullWidth\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Enter Amount of Starting Money\"\r\n\t\t\t\tonChange={(event) => setUserEarnings(event.target.value)}\r\n\t\t\t/>\r\n\t\t\t<br /><br />\r\n\t\t\t<FormControl fullWidth>\r\n\t\t\t\t<InputLabel id=\"select-difficulty-label\">Difficulty</InputLabel>\r\n\t\t\t\t<Select\r\n\t\t\t\t\tlabelId=\"select-difficulty-label\"\r\n\t\t\t\t\tid=\"select-difficulty\"\r\n\t\t\t\t\tvalue={difficulty}\r\n\t\t\t\t\tlabel=\"Difficulty\"\r\n\t\t\t\t\tonChange={(event) => setDifficulty(event.target.value)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<MenuItem value={1}>Beginner</MenuItem>\r\n\t\t\t\t\t<MenuItem value={2}>Intermediate</MenuItem>\r\n\t\t\t\t\t<MenuItem value={3}>Expert</MenuItem>\r\n\t\t\t\t</Select>\r\n\t\t\t</FormControl>\r\n\t\t\t<br />\r\n\t\t\t<FormControl fullWidth>\r\n\t\t\t\t<InputLabel id=\"select-label-hasTriviaRound\">Play Trivia Rounds?</InputLabel>\r\n\t\t\t\t<Select\r\n\t\t\t\t\tlabelId=\"select-label-hasTriviaRound\"\r\n\t\t\t\t\tid=\"select-hasTrivia\"\r\n\t\t\t\t\tvalue={hasTriviaRound}\r\n\t\t\t\t\tlabel=\"hasTrivia\"\r\n\t\t\t\t\tonChange={(event) => setHasTriviaRound(event.target.value)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<MenuItem value={true}>Yes</MenuItem>\r\n\t\t\t\t\t<MenuItem value={false}>No</MenuItem>\r\n\t\t\t\t</Select>\r\n\t\t\t</FormControl>\r\n\r\n\t\t\t<br></br>\r\n\t\t\t<br></br>\r\n\t\t\t<Button variant=\"contained\" onClick={handleOnClick}>\r\n\t\t\t\tSubmit\r\n\t\t\t</Button>\r\n\t\t</Box>\r\n\t);\r\n};\r\n\r\nexport default HostConfiguration;\r\n","import * as React from \"react\";\r\nimport {\r\n\tBox,\r\n\tTableContainer,\r\n\tTable,\r\n\tTableBody,\r\n\tTableRow,\r\n\tTableCell,\r\n\tTableHead,\r\n} from \"@material-ui/core\";\r\nimport { useContext } from \"react\";\r\nimport { Context } from \"../../context/ContextProvider\";\r\n\r\n//Displays game scores for each team\r\nconst GameScore = ({ children }) => {\r\n\t//importing shared states to dispaly the points per team\r\n\tconst { scores } = useContext(Context);\r\n\r\n\t// displays the scores per team in a row and column format\r\n\treturn (\r\n\t\t<Box>\r\n\t\t\t<TableContainer>\r\n\t\t\t\t<Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\r\n\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t<TableCell>Team</TableCell>\r\n\t\t\t\t\t\t\t<TableCell align=\"right\" sx={{ minWidth: 300 }}>\r\n\t\t\t\t\t\t\t\tScores\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t{scores.map((score, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t<TableCell component=\"th\" scope=\"row\">\r\n\t\t\t\t\t\t\t\t\t\tTeam {index + 1}\r\n\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t<TableCell style={{ width: 160 }} align=\"right\">\r\n\t\t\t\t\t\t\t\t\t\t{score}\r\n\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</TableBody>\r\n\t\t\t\t</Table>\r\n\t\t\t</TableContainer>\r\n\t\t</Box>\r\n\t);\r\n};\r\nexport default GameScore;\r\n","import * as React from 'react';\r\nimport { useState, useContext } from 'react';\r\nimport { Context } from '../../context/ContextProvider'\r\nimport {\r\n    Box,\r\n    TableContainer,\r\n    Table,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    TableHead,\r\n} from \"@material-ui/core\";\r\n\r\nconst TriviaBoard = ({ }) => {\r\n\r\n    const { submittedTriviaAnswers, triviaQuestion } = useContext(Context);;\r\n\r\n    const boxStyling = {\r\n        m: '20px',\r\n        p: '10px',\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <TableContainer>\r\n                <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Team</TableCell>\r\n                            <TableCell align=\"right\" sx={{ minWidth: 300 }}>\r\n                                Submitted Answer\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow key={'correctAnswer'}>\r\n                            <TableCell component=\"th\" scope=\"child\">\r\n                                Correct Answer\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                {triviaQuestion.Answer}\r\n                            </TableCell>;\r\n                        </TableRow>\r\n                        {submittedTriviaAnswers.map((answer, index) => {\r\n                            return (\r\n                                <TableRow key={index + 1}>\r\n                                    <TableCell component=\"th\" scope=\"child\">\r\n                                        Team {index + 1}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        {answer}\r\n                                    </TableCell>;\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Box>\r\n    );\r\n\r\n}\r\nexport default TriviaBoard;","import * as React from 'react';\r\nimport { Box, Button, ButtonGroup, Typography, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core'\r\nimport { useState, useContext } from 'react';\r\nimport { Context } from '../../context/ContextProvider'\r\nimport TriviaBoard from '../TriviaBoard/TriviaBoard';\r\n\r\nconst TriviaInterface = ({ isHost, isTeamLeader }) => {\r\n\r\n    const { host_gets_trivia_question, host_ends_trivia_round, triviaQuestion, triviaAnswer, setTriviaAnswer,\r\n        student_submit_trivia_answer, hasSubmittedTrivia, setHasSubmittedTrivia, submittedTriviaAnswers, myTeamId } = useContext(Context);;\r\n\r\n    const boxStyling = {\r\n        m: '20px',\r\n        p: '10px',\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setTriviaAnswer(event.target.value);\r\n    };\r\n\r\n    const handleSubmitAnswer = () => {\r\n        student_submit_trivia_answer();\r\n        setHasSubmittedTrivia(true);\r\n    }\r\n\r\n    if (isHost) {\r\n        return (\r\n            <Box>\r\n                <Box sx={boxStyling} >\r\n                    {triviaQuestion &&\r\n                        <Box sx={boxStyling} >\r\n                            <Typography align='center' variant='h6'>{`Trivia Question: ${triviaQuestion.Question}`}</Typography>\r\n                            <br />\r\n                            <Typography align='center' variant='h6'>{`Option 1: ${triviaQuestion.Option1}`}</Typography>\r\n                            <Typography align='center' variant='h6'>{`Option 2: ${triviaQuestion.Option2}`}</Typography>\r\n\r\n                            {triviaQuestion.Option3 && <Typography align='center' variant='h6'>{`Option 3: ${triviaQuestion.Option3}`}</Typography>}\r\n                            {triviaQuestion.Option4 && <Typography align='center' variant='h6'>{`Option 4: ${triviaQuestion.Option4}`}</Typography>}\r\n                            <br />\r\n                            {/* <Typography align='center' variant='h6'>{`Correct Answer: ${triviaQuestion.Answer}`}</Typography> */}\r\n                        </Box>\r\n                    }\r\n                </Box>\r\n                <Box align='center'>\r\n                    <ButtonGroup variant=\"text\" aria-label=\"text button group\">\r\n                        <Button align='center' variant=\"contained\" onClick={() => { host_ends_trivia_round() }}>End Trivia Round</Button>\r\n                        <Button variant=\"contained\" onClick={() => { host_gets_trivia_question() }}>Next Trivia Question</Button>\r\n                    </ButtonGroup>\r\n                </Box>\r\n\r\n                {triviaQuestion && <TriviaBoard />}\r\n            </Box>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Box>\r\n                <Box sx={boxStyling} >\r\n                    {triviaQuestion\r\n                        ?\r\n                        <Box sx={boxStyling} >\r\n                            <Typography align='center' variant='h6'>{`Trivia Question: ${triviaQuestion.Question}`}</Typography>\r\n                            <br /><br />\r\n                            <FormControl fullWidth>\r\n                                <InputLabel id=\"trivia-answer-label\">Options</InputLabel>\r\n                                <Select\r\n                                    labelId=\"trivia-answer-label\"\r\n                                    id=\"trivia-select\"\r\n                                    value={triviaAnswer}\r\n                                    label=\"TriviaAnswer\"\r\n                                    onChange={handleChange}\r\n                                >\r\n                                    <MenuItem value={triviaQuestion.Option1}>{triviaQuestion.Option1}</MenuItem>\r\n                                    <MenuItem value={triviaQuestion.Option2}>{triviaQuestion.Option2}</MenuItem>\r\n                                    {triviaQuestion.Option3 && <MenuItem value={triviaQuestion.Option3}>{triviaQuestion.Option3}</MenuItem>}\r\n                                    {triviaQuestion.Option3 && <MenuItem value={triviaQuestion.Option4}>{triviaQuestion.Option4}</MenuItem>}\r\n\r\n                                </Select>\r\n                            </FormControl>\r\n                            <br /> <br />\r\n                            {isTeamLeader ?\r\n                                <Box>\r\n                                    <Typography>You are the current team leader, discuss with your team before submitting your answer.</Typography>\r\n                                    <Button disabled={hasSubmittedTrivia} align='center' variant=\"contained\" onClick={() => handleSubmitAnswer()}>Submit Answer</Button>\r\n                                </Box>\r\n                                :\r\n                                <Typography>You are not the current team leader, discuss with your team to help your team leader pick the right answer.</Typography>\r\n                            }\r\n\r\n                            {submittedTriviaAnswers[myTeamId] && <TriviaBoard />}\r\n                        </Box>\r\n                        :\r\n                        <Typography align='center' variant='h6'>{`Waiting for a trivia question...`}</Typography>\r\n                    }\r\n                </Box>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n}\r\nexport default TriviaInterface;","import BoughtDefensesBoard from \"./BoughtDefensesBoard\";\r\nexport default BoughtDefensesBoard;","import * as React from 'react';\r\nimport { useState, useContext } from 'react';\r\nimport { Context } from '../../context/ContextProvider'\r\nimport {\r\n    Box,\r\n    TableContainer,\r\n    Table,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    TableHead,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\n\r\nconst BoughtDefensesBoard = ({ }) => {\r\n\r\n    const { boughtDefenses } = useContext(Context);;\r\n\r\n    const boxStyling = {\r\n        m: '20px',\r\n        p: '10px',\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <TableContainer>\r\n                <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Team</TableCell>\r\n                            <TableCell align=\"right\" sx={{ minWidth: 300 }}>\r\n                                Bought Defenses\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {boughtDefenses.map((defenses, index) => {\r\n                            return (\r\n                                <TableRow key={index + 1}>\r\n                                    <TableCell component=\"th\" scope=\"child\">\r\n                                        Team {index + 1}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        {defenses.map(defense =>{\r\n                                            return (<Typography>{defense.defenseName}</Typography>)\r\n                                        })}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Box>\r\n    )\r\n\r\n}\r\nexport default BoughtDefensesBoard;","import { Typography, Box } from \"@material-ui/core\";\r\nimport { useState, useEffect} from \"react\";\r\n\r\nconst Timer = ({ initialSeconds, resetTimer, setResetTimer}) => {\r\n    const [seconds, setSeconds] = useState(initialSeconds);\r\n\r\n    useEffect(()=>{\r\n        if(resetTimer){\r\n            setSeconds(initialSeconds);\r\n            setResetTimer(false);\r\n        }\r\n    }, [resetTimer])\r\n\r\n\r\n    useEffect(() => {\r\n        let myInterval = setInterval(() => {\r\n            if (seconds > 0) {\r\n                setSeconds(seconds - 1);\r\n            }\r\n            if (seconds === 0) {\r\n                clearInterval(myInterval)\r\n            }\r\n        }, 1000)\r\n        return () => {\r\n            clearInterval(myInterval);\r\n        };\r\n    });\r\n\r\n    return (\r\n        <Box>\r\n            {seconds === 0\r\n                ? null\r\n                : <Typography align='center' variant='h5'> Timer: {seconds < 10 ? `0${seconds}` : seconds} </Typography>\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Timer;","import * as React from \"react\";\r\nimport {\r\n\tBox,\r\n\tTypography,\r\n\tCard,\r\n\tCardContent,\r\n\tButton,\r\n\tButtonGroup,\r\n\tGrid,\r\n\tTooltip,\r\n} from \"@material-ui/core\";\r\nimport { Context } from \"../../context/ContextProvider\";\r\nimport { useState, useContext } from \"react\";\r\nimport GameScore from \"../GameScore/GameScore\";\r\nimport Timer from \"../Timer/Timer\"\r\n\r\n// this page displays the actual game play witht the attack rolled by the host ad user selected defense as buttons\r\nconst GameInterface = ({ isHost }) => {\r\n\t//importing shared states\r\n\tconst {\r\n\t\troundCount, nbOfRounds, timeForEachRound,\r\n\t\tresetTimer, setResetTimer,\r\n\t\trolledAttack,\r\n\t\tselectedDefenses,\r\n\t\tdefensesToSubmit, setDefensesToSubmit,\r\n\t\thasSubmittedDefenses, setHasSubmittedDefenses,\r\n\t\tisTeamLeader,\r\n\t\thost_start_next_defense_round, host_end_game,\r\n\t\tstudent_play_defenses,\r\n\t} = useContext(Context);\r\n\r\n\tconst [count, setCount] = useState(0);\r\n\r\n\tconst boxStyling = {\r\n\t\tm: \"20px\",\r\n\t\tp: \"10px\",\r\n\t};\r\n\r\n\t//handles the user submitted defenses\r\n\tconst handleChange = (defenseID, defenseName) => {\r\n\t\t//avoids repetition\r\n\r\n\t\t//this statement prohibits the user from submitting more than 2 defenses against the attack\r\n\t\tif (count < 2) {\r\n\t\t\tsetCount(count + 1);\r\n\t\t\t//adds the selected defense to selectedItem list\r\n\t\t\tconst tempDefense = {\r\n\t\t\t\tdefenseName: defenseName,\r\n\t\t\t\tdefenseID: defenseID,\r\n\t\t\t};\r\n\t\t\tsetDefensesToSubmit([...defensesToSubmit, tempDefense]);\r\n\t\t}\r\n\t\t// this function allows the user to delete first defense from the selected item list and add the new defense to the selected item list\r\n\t\telse {\r\n\t\t\tconst tempDefense = {\r\n\t\t\t\tdefenseName: defenseName,\r\n\t\t\t\tdefenseID: defenseID,\r\n\t\t\t};\r\n\t\t\tsetDefensesToSubmit([...defensesToSubmit.slice(1), tempDefense]);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleEndGame = () => {\r\n\t\thost_end_game();\r\n\t}\r\n\r\n\tconst handleNextRound = () => {\r\n\t\tsetResetTimer(true);\r\n\t\thost_start_next_defense_round();\r\n\t}\r\n\r\n\tconst handleSubmitDefenses = () => {\r\n\t\tsetHasSubmittedDefenses(true);\r\n\t\tstudent_play_defenses();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Box sx={boxStyling}>\r\n\t\t\t<Timer initialSeconds={timeForEachRound} resetTimer={resetTimer} setResetTimer={setResetTimer} />\r\n\t\t\t<Grid container justifyContent=\"flex-end\">\r\n\t\t\t\t<Typography>{`Current round: ${roundCount}/${nbOfRounds}`}</Typography>\r\n\t\t\t</Grid>\r\n\r\n\t\t\t<GameScore />\r\n\t\t\t<Box sx={{ m: \"30px\" }}>\r\n\t\t\t\t<Card>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Tooltip title={rolledAttack.Description}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\talign=\"center\"\r\n\t\t\t\t\t\t\t\tvariant=\"h6\"\r\n\t\t\t\t\t\t\t\tcolor=\"text.secondary\"\r\n\t\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{`Attack rolled: ${rolledAttack.Name} `}\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Card>\r\n\t\t\t</Box>\r\n\r\n\t\t\t{isHost\r\n\t\t\t\t?\r\n\t\t\t\t<Box align='center'>\r\n\t\t\t\t\t<ButtonGroup variant=\"text\" aria-label=\"text button group\">\r\n\t\t\t\t\t\t<Button align='center' variant=\"contained\" onClick={() => { handleEndGame() }}>End Game</Button>\r\n\t\t\t\t\t\t{(roundCount < nbOfRounds) &&\r\n\t\t\t\t\t\t\t<Button variant=\"contained\" onClick={() => { handleNextRound() }}>Next Round</Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t</Box>\r\n\r\n\t\t\t\t:\r\n\r\n\t\t\t\t<Box>\r\n\t\t\t\t\t<Grid container spacing={8}>\r\n\t\t\t\t\t\t{selectedDefenses.map((item) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\t\tsize=\"large\"\r\n\t\t\t\t\t\t\t\t\t\tcolor=\"blue\"\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleChange(item.defenseID, item.defenseName)}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"h7\"\r\n\t\t\t\t\t\t\t\t\t\t\talign=\"center\"\r\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"text.secondary\"\r\n\t\t\t\t\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{item.defenseName}\r\n\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Box sx={boxStyling}>\r\n\t\t\t\t\t\t<Box sx={{ m: \"10px\" }}>\r\n\t\t\t\t\t\t\t<Typography>Selected Defense: </Typography>\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t\t<Box sx={{ m: \"10px\" }}>\r\n\t\t\t\t\t\t\t\t{defensesToSubmit.map((item) => {\r\n\t\t\t\t\t\t\t\t\treturn <Typography>{item.defenseName}</Typography>;\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t{isTeamLeader ?\r\n\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t<Typography>You are the current team leader, discuss with your team before submitting your defenses.</Typography>\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t<Typography>You are not the current team leader, discuss with your team to help your team leader pick appropriate defenses.</Typography>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<Button disabled={!isTeamLeader || hasSubmittedDefenses} variant=\"contained\" onClick={() => handleSubmitDefenses()}>\r\n\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Box>\r\n\t\t\t}\r\n\r\n\t\t</Box>\r\n\t);\r\n};\r\nexport default GameInterface;\r\n","import * as React from 'react';\r\nimport { useState, useContext } from 'react';\r\nimport { Context } from '../../context/ContextProvider'\r\nimport {\r\n    Typography,\r\n    Box,\r\n    TableContainer,\r\n    Table,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    TableHead,\r\n} from \"@material-ui/core\";\r\n\r\nconst DefenseBoard = ({ }) => {\r\n\r\n    const { playedDefenses, bestDefenses } = useContext(Context);;\r\n\r\n    const boxStyling = {\r\n        m: '20px',\r\n        p: '10px',\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <TableContainer>\r\n                <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Team</TableCell>\r\n                            <TableCell align=\"right\" sx={{ minWidth: 300 }}>\r\n                                Played Defenses\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow key={'correctAnswer'}>\r\n                            <TableCell component=\"th\" scope=\"child\">\r\n                                Best Defenses\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                {bestDefenses.map(bestDefense => {\r\n                                    return (<Typography>{bestDefense.Name}</Typography>)\r\n                                })}\r\n                            </TableCell>;\r\n                        </TableRow>\r\n                        {playedDefenses.map((eachTeamsPlayedDefenses, index) => {\r\n                            return (\r\n                                <TableRow key={index + 1}>\r\n                                    <TableCell component=\"th\" scope=\"child\">\r\n                                        Team {index + 1}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        {eachTeamsPlayedDefenses.map(playedDefense => {\r\n                                            return (<Typography>{playedDefense.defenseName}</Typography>)\r\n                                        })}\r\n                                    </TableCell>;\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Box>\r\n    );\r\n\r\n}\r\nexport default DefenseBoard;","import * as React from \"react\";\r\nimport { Box, Button, Typography } from \"@material-ui/core\";\r\nimport { useState, useContext } from \"react\";\r\nimport { Context } from \"../../context/ContextProvider\";\r\nimport ShuffleTeam from \"../ShuffleTeam/ShuffleTeam\";\r\nimport HostConfiguration from \"../HostConfiguration/HostConfiguration\";\r\nimport GameScore from \"../GameScore/GameScore\";\r\nimport TriviaInterface from \"../TriviaInterface/TriviaInterface\";\r\nimport BoughtDefensesBoard from \"../BoughtDefensesBoard\";\r\nimport GameInterface from \"../GameInterface/GameInterface\";\r\nimport DefenseBoard from \"../DefenseBoard/DefenseBoard\";\r\n\r\nconst HostInterface = ({ }) => {\r\n\tconst {\r\n\t\tlobbyId,\r\n\t\thasTriviaRound,\r\n\t\tgameStage,\r\n\t\thost_start_game,\r\n\t\tboughtDefenses,\r\n\t\thost_start_next_defense_round\r\n\t} = useContext(Context);\r\n\r\n\tconst [allDoneBuyingDefenses, setAllDoneBuyingDefenses] = useState(false);\r\n\r\n\tconst boxStyling = {\r\n\t\tm: \"20px\",\r\n\t\tp: \"10px\",\r\n\t};\r\n\r\n\t//useEffect to decide if all teams have finished buying attacks\r\n\tReact.useEffect(() => {\r\n\t\tlet aTeamIsNotDone = true;\r\n\r\n\t\tboughtDefenses.forEach(team => {\r\n\t\t\tif (team.length === 0) {\r\n\t\t\t\taTeamIsNotDone = false;\r\n\t\t\t}\r\n\t\t});\r\n\t\tif (boughtDefenses.length === 0) {\r\n\t\t\taTeamIsNotDone = false;\r\n\t\t}\r\n\t\tsetAllDoneBuyingDefenses(aTeamIsNotDone);\r\n\t}, [boughtDefenses]);\r\n\r\n\tconst handleStartGame = () => {\r\n\t\thost_start_game();\r\n\t}\r\n\r\n\tconst handleStartDefendAttack = () => {\r\n\t\thost_start_next_defense_round();\r\n\t}\r\n\r\n\tif (gameStage === 'CONFIG') {\r\n\t\treturn (\r\n\t\t\t<HostConfiguration />\r\n\t\t)\r\n\t}\r\n\r\n\tif (gameStage === 'WAITING') {\r\n\t\treturn (\r\n\t\t\t<Box sx={boxStyling}>\r\n\t\t\t\t<Typography\r\n\t\t\t\t\talign=\"center\"\r\n\t\t\t\t\tvariant=\"h6\"\r\n\t\t\t\t>{`Lobby created, use code ${lobbyId} to join.`}</Typography>\r\n\r\n\t\t\t\t<ShuffleTeam />\r\n\t\t\t\t<Box sx={boxStyling}>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t{hasTriviaRound\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\t<Button variant=\"contained\" onClick={handleStartGame}>\r\n\t\t\t\t\t\t\tStart Game (Trivia Round)\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t<Button variant=\"contained\" onClick={handleStartGame}>\r\n\t\t\t\t\t\t\tStart Game (Buy Defense Phase)\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Box>\r\n\t\t\t</Box>\r\n\t\t);\r\n\t}\r\n\r\n\tif (gameStage === 'TRIVIA') {\r\n\t\treturn (\r\n\t\t\t<TriviaInterface isHost={true} isTeamLeader={false} />\r\n\t\t)\r\n\t}\r\n\r\n\tif (gameStage === 'BUY_DEFENSE') {\r\n\t\treturn (\r\n\t\t\t<Box>\r\n\t\t\t\t{allDoneBuyingDefenses\r\n\t\t\t\t\t?\r\n\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t<Typography align=\"center\" variant=\"h6\">Teams have finished buying defenses.</Typography>\r\n\t\t\t\t\t\t<Typography align=\"center\" variant=\"h6\">You can start whenever you see fit.</Typography>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t<Typography align=\"center\" variant=\"h6\">Students are buying defenses...</Typography>\r\n\t\t\t\t\t\t<Typography align=\"center\" variant=\"h6\">Meanwhile, you can view each team's purchased defenses once a team finishes their purchase.</Typography>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t}\r\n\t\t\t\t<Box textAlign='center'>\r\n\t\t\t\t\t<Button variant=\"contained\" align=\"center\" disabled={!allDoneBuyingDefenses} onClick={() => handleStartDefendAttack()}>\r\n\t\t\t\t\t\tStart Game\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Box>\r\n\r\n\t\t\t\t<BoughtDefensesBoard />\r\n\t\t\t</Box>\r\n\t\t)\r\n\t}\r\n\r\n\tif (gameStage === 'DEFEND_ATTACK') {\r\n\t\treturn (\r\n\t\t\t<Box>\r\n\t\t\t\t<GameInterface isHost={true} />\r\n\t\t\t\t<DefenseBoard />\r\n\t\t\t</Box>\r\n\t\t)\r\n\t}\r\n\r\n\tif (gameStage === 'GAME_END') {\r\n\t\treturn (\r\n\t\t\t<Box>\r\n\t\t\t\t<Typography align=\"center\" variant=\"h6\">This game session is over.</Typography>\r\n\t\t\t\t<GameScore />\r\n\t\t\t</Box>\r\n\t\t)\r\n\t}\r\n\r\n};\r\nexport default HostInterface;\r\n","import * as React from \"react\";\r\nimport { useState, useContext } from \"react\";\r\nimport {\r\n\tBox,\r\n\tTypography,\r\n\tTableContainer,\r\n\tTable,\r\n\tTableBody,\r\n\tTableRow,\r\n\tTableCell,\r\n\tButton,\r\n\tTableHead,\r\n\tFormGroup,\r\n\tFormControl,\r\n\tFormControlLabel,\r\n\tCheckbox,\r\n\tCard,\r\n\tCardContent,\r\n} from \"@material-ui/core\";\r\nimport { Context } from \"../../context/ContextProvider\";\r\n\r\n//this page displys all the defense for players to purchase those defenses\r\n\r\nconst BuyingInterface = ({ }) => {\r\n\t// importing shared states between different components\r\n\tconst {\r\n\t\talias, myTeamId, isTeamLeader,\r\n\t\tuserEarnings, setUserEarnings,\r\n\t\tuserDefenses, setUserDefenses,\r\n\t\tselectedDefenses, setSelectedDefenses,\r\n\t\tboughtDefenses,\r\n\t\tsetGameStage,\r\n\t\tstudent_buy_defenses,\r\n\t} = useContext(Context);\r\n\r\n\tconst boxStyling = {\r\n\t\tp: 6,\r\n\t\tminWidth: \"85%\",\r\n\t};\r\n\r\n\tReact.useEffect(() => {\r\n\t\tif (boughtDefenses.length !== 0 && boughtDefenses[myTeamId].length !== 0) {\r\n\t\t\tsetGameStage(\"DONE_BUYING\");\r\n\t\t} \r\n\t}, [boughtDefenses])\r\n\r\n\t// a state to store the checkboxstate and see if its is checked or not\r\n\tconst [isChecked, setIsChecked] = useState([]);\r\n\r\n\t// when the user toggles a checkbox the function removes the defense associated with the checkbox from the collection of user chosen defenses\r\n\tconst removeDefense = (index, cost) => {\r\n\t\t//creates a shallow copy of defense list to removes the selected index from the list\r\n\t\tconst tempDefenseList = [\r\n\t\t\t...selectedDefenses.slice(0, index),\r\n\t\t\t...selectedDefenses.slice(index + 1, selectedDefenses.length),\r\n\t\t];\r\n\t\t//settting the temp list as the new selected defense list\r\n\t\tsetSelectedDefenses(tempDefenseList);\r\n\t\t// adding the cost of the deleted item back to the total money of the user\r\n\t\tsetUserEarnings(userEarnings + cost);\r\n\t};\r\n\r\n\tconst getUserDefense = (value, name, cost, index, id) => {\r\n\t\t// adds the selected defense to the selected defense list in the specific index\r\n\t\t//the specific index helps keep track of the checkstate of the defense\r\n\t\tconst currentIndex = [...isChecked];\r\n\t\tlet tempIndex = { ...currentIndex[index] };\r\n\t\ttempIndex = value;\r\n\t\tcurrentIndex[index] = tempIndex;\r\n\t\tsetIsChecked(currentIndex);\r\n\r\n\t\t// if the user unclicks the checkbox and the defense in in the seelcted defense list the defense is removed from the selectd defense list\r\n\t\tif (!value && selectedDefenses.length > 0 && userEarnings > 0) {\r\n\t\t\tselectedDefenses.map((item, index) => {\r\n\t\t\t\tif (item.defenseName === name) {\r\n\t\t\t\t\tremoveDefense(index, item.defenseCost);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t//else if the uer clicks on the checkbox to select the denfense it adds the defense to the selected defense list and the removes the defense cost from the total earnings\r\n\t\telse if (value && selectedDefenses.length >= 0 && userEarnings > 0) {\r\n\t\t\tconst tempDefense = {\r\n\t\t\t\tdefenseName: name,\r\n\t\t\t\tdefenseCost: cost,\r\n\t\t\t\tdefenseID: id,\r\n\t\t\t\tdone: value,\r\n\t\t\t};\r\n\t\t\tsetSelectedDefenses([...selectedDefenses, tempDefense]);\r\n\t\t\tif (userEarnings - cost >= 8) {\r\n\t\t\t\tsetUserEarnings(userEarnings - cost);\r\n\t\t\t} else {\r\n\t\t\t\tsetUserEarnings(userEarnings - cost);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleSubmit = () => {\r\n\t\tsetGameStage('DONE_BUYING');\r\n\t\tstudent_buy_defenses();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Box sx={boxStyling}>\r\n\t\t\t<Card>\r\n\t\t\t\t<CardContent>\r\n\t\t\t\t\t{isTeamLeader ? (\r\n\t\t\t\t\t\t<Typography gutterBottom>{`You are the current team leader of team ${myTeamId + 1}, discuss with your team to decide what defenses to buy!`}</Typography>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<Typography>{`You are not the current team leader of team ${myTeamId + 1}, discuss with your team to help your team leader decide what defenses to buy!`}</Typography>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</CardContent>\r\n\t\t\t</Card>\r\n\t\t\t<br></br>\r\n\t\t\t<br></br>\r\n\r\n\t\t\t<Typography variant=\"h7\" color=\"text.secondary\" gutterBottom>\r\n\t\t\t\tEarnings:${userEarnings}\r\n\t\t\t</Typography>\r\n\r\n\t\t\t<br></br>\r\n\t\t\t<br></br>\r\n\t\t\t<TableContainer>\r\n\t\t\t\t<Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\r\n\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t<TableCell>Defenses</TableCell>\r\n\t\t\t\t\t\t\t<TableCell align=\"right\">Cost</TableCell>\r\n\t\t\t\t\t\t\t<TableCell align=\"right\">Submission</TableCell>\r\n\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t{userDefenses.map((row, index) => (\r\n\t\t\t\t\t\t\t<TableRow key={row.Name}>\r\n\t\t\t\t\t\t\t\t<TableCell component=\"th\" scope=\"row\">\r\n\t\t\t\t\t\t\t\t\t{row.Name}\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell style={{ width: 160 }} align=\"right\">\r\n\t\t\t\t\t\t\t\t\t{row.cost}\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\r\n\t\t\t\t\t\t\t\t<TableCell style={{ width: 160 }} align=\"right\">\r\n\t\t\t\t\t\t\t\t\t<FormControl component=\"fieldset\" variant=\"standard\">\r\n\t\t\t\t\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\t\t\t\t\t\tcontrol={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// The disabled prop checks if the cost of the selected defense is less than the total user earning, if so disbales the defense to restrict the user fromm purchasing that defense\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// onChange handles any time the user toggles the checkbox\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// the checkfeature retrives the value from the isChecked array\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={row.label}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetUserDefense(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tevent.target.checked,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trow.Name,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trow.cost,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trow.DefenseID\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={row.cost > userEarnings && !isChecked[index]}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={isChecked[index]}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</TableBody>\r\n\t\t\t\t</Table>\r\n\t\t\t</TableContainer>\r\n\t\t\t<br></br>\r\n\t\t\t<Button variant=\"contained\" disabled={!isTeamLeader} onClick={() => handleSubmit()}>\r\n\t\t\t\tSubmit\r\n\t\t\t</Button>\r\n\t\t\t{!isTeamLeader &&\r\n\t\t\t\t<Box sx={{ fontStyle: 'italic' }}>\r\n\t\t\t\t\t<Typography>Only team leader can submit</Typography>\r\n\t\t\t\t</Box>\r\n\t\t\t}\r\n\t\t</Box>\r\n\t);\r\n};\r\nexport default BuyingInterface;\r\n","import * as React from \"react\";\r\nimport {\r\n\tBox,\r\n\tTableContainer,\r\n\tTable,\r\n\tTableBody,\r\n\tTableRow,\r\n\tTableCell,\r\n\tTableHead,\r\n} from \"@material-ui/core\";\r\nimport { useContext } from \"react\";\r\nimport { Context } from \"../../context/ContextProvider\";\r\n\r\n//displays the current team member info and displays in a row and column format\r\nconst PlayerInfromation = ({}) => {\r\n\t//shared state\r\n\tconst { teamInfo } = useContext(Context);\r\n\r\n\treturn (\r\n\t\t<Box>\r\n\t\t\t<TableContainer>\r\n\t\t\t\t<Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\r\n\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t<TableCell>Team</TableCell>\r\n\t\t\t\t\t\t\t<TableCell align=\"right\" sx={{ minWidth: 300 }}>\r\n\t\t\t\t\t\t\t\tMembers\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t{teamInfo.map((item, index) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t<TableRow key={index + 1}>\r\n\t\t\t\t\t\t\t\t\t<TableCell component=\"th\" scope=\"child\">\r\n\t\t\t\t\t\t\t\t\t\tTeam {index + 1}\r\n\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t{item.map((child) => {\r\n\t\t\t\t\t\t\t\t\t\treturn <TableCell align=\"right\">{child.alias}</TableCell>;\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</Table>\r\n\t\t\t</TableContainer>\r\n\t\t</Box>\r\n\t);\r\n};\r\nexport default PlayerInfromation;\r\n","import GameScore from \"./GameScore\";\r\nexport default GameScore;","import * as React from \"react\";\r\nimport { useContext, useState } from \"react\";\r\nimport { Box, Typography } from \"@material-ui/core\";\r\nimport { Context } from \"../../context/ContextProvider\";\r\nimport GameInterface from \"../GameInterface/GameInterface\";\r\nimport BuyingInterface from \"../BuyingInterface/BuyingInterface\";\r\nimport PlayerInformation from \"../PlayerInformation/PlayerInformation\";\r\nimport TriviaInterface from \"../TriviaInterface/TriviaInterface\";\r\nimport BoughtDefensesBoard from \"../BoughtDefensesBoard\";\r\nimport GameScore from \"../GameScore\";\r\nimport DefenseBoard from \"../DefenseBoard/DefenseBoard\";\r\n\r\n// tha main player interface that handles the the change of pages for the players\r\nconst PlayerInterface = ({ }) => {\r\n\t// shared states\r\n\tconst {\r\n\t\tgameStage,\r\n\t\tisTeamLeader,\r\n\t\tplayedDefenses, myTeamId\r\n\t} = useContext(Context);\r\n\r\n\tif (gameStage === 'WAITING') {\r\n\t\treturn (\r\n\t\t\t<Box>\r\n\t\t\t\t<Typography\r\n\t\t\t\t\talign=\"center\"\r\n\t\t\t\t\tvariant=\"h6\"\r\n\t\t\t\t>{`Waiting for host to start game...`}</Typography>\r\n\r\n\t\t\t\t<PlayerInformation />\r\n\t\t\t</Box>\r\n\t\t)\r\n\t}\r\n\r\n\tif (gameStage === 'TRIVIA') {\r\n\t\treturn (\r\n\t\t\t<TriviaInterface isHost={false} isTeamLeader={isTeamLeader} />\r\n\t\t)\r\n\t}\r\n\r\n\tif (gameStage === 'BUY_DEFENSE') {\r\n\t\treturn (\r\n\t\t\t<BuyingInterface />\r\n\t\t)\r\n\t}\r\n\r\n\tif (gameStage === 'DONE_BUYING') {\r\n\t\treturn (\r\n\t\t\t<Box>\r\n\t\t\t\t<Typography align=\"center\" variant=\"h6\">Waiting for the host to start game...</Typography>\r\n\t\t\t\t<Typography align=\"center\" variant=\"h6\">Meanwhile, you can view each team's purchased defenses.</Typography>\r\n\t\t\t\t<BoughtDefensesBoard />\r\n\t\t\t</Box>\r\n\t\t)\r\n\t}\r\n\r\n\tif (gameStage === 'DEFEND_ATTACK') {\r\n\t\treturn (\r\n\t\t\t<Box>\r\n\t\t\t\t<GameInterface isHost={false} />\r\n\t\t\t\t{(playedDefenses[myTeamId].length !== 0) && <DefenseBoard />}\r\n\t\t\t</Box>\r\n\t\t)\r\n\t}\r\n\r\n\tif (gameStage === 'GAME_END') {\r\n\t\treturn (\r\n\t\t\t<Box>\r\n\t\t\t\t<Typography align=\"center\" variant=\"h6\">This game session is over.</Typography>\r\n\t\t\t\t<GameScore />\r\n\t\t\t</Box>\r\n\t\t)\r\n\t}\r\n\r\n};\r\nexport default PlayerInterface;\r\n","import * as React from \"react\";\r\nimport { Box, Button, Input } from \"@material-ui/core\";\r\nimport { useContext } from \"react\";\r\nimport { Context } from \"../../context/ContextProvider\";\r\n\r\nconst LobbyInterFace = ({ children }) => {\r\n\tconst { setLobbyId, setIsInLobby, setIsHost, setAlias, setGameStage, student_join_lobby } = useContext(Context);\r\n\r\n\t//generic styling for the box\r\n\tconst boxStyling = {\r\n\t\tp: 6,\r\n\t\tborder: \"1px solid black\",\r\n\t\tborderRadius: \"10px\",\r\n\t\twidth: 250,\r\n\t\talign: \"center\",\r\n\t\tposition: \"absolute\",\r\n\t\ttop: \"50%\",\r\n\t\tleft: \"50%\",\r\n\t\ttransform: \"translate(-50%, -50%)\",\r\n\t};\r\n\r\n\tconst handleOnClick = () => {\r\n\t\tsetIsInLobby(true);\r\n\t\tsetGameStage('WAITING');\r\n\t\tstudent_join_lobby();\r\n\t}\r\n\r\n\tconst handleSetLobbyId = (lobbyId) => {\r\n\t\t//get rid of white spaces\r\n\t\tsetLobbyId(lobbyId.trim());\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Box sx={boxStyling}>\r\n\t\t\t<Button\r\n\t\t\t\tvariant=\"contained\"\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\tsetIsInLobby(true);\r\n\t\t\t\t\tsetIsHost(true);\r\n\t\t\t\t\tsetAlias(\"Host\");\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\tCreate Lobby\r\n\t\t\t</Button>\r\n\t\t\t<h4>or</h4>\r\n\r\n\t\t\t<Input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Enter Lobby ID\"\r\n\t\t\t\tonChange={(event) => handleSetLobbyId(event.target.value)}\r\n\t\t\t/>\r\n\t\t\t<br></br>\r\n\t\t\t<br></br>\r\n\t\t\t<Input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Enter Name\"\r\n\t\t\t\tonChange={(event) => setAlias(event.target.value)}\r\n\t\t\t/>\r\n\t\t\t<br></br>\r\n\t\t\t<br></br>\r\n\t\t\t<Button variant=\"contained\" onClick={() => handleOnClick()}>\r\n\t\t\t\tJoin Lobby\r\n\t\t\t</Button>\r\n\t\t</Box>\r\n\t);\r\n};\r\n\r\nexport default LobbyInterFace;\r\n","import { Box, TextField, Grid, Button, Typography, List, ListItemText } from '@material-ui/core';\r\nimport { StylesContext } from '@material-ui/styles';\r\nimport React from 'react'\r\nimport { useState, useContext } from 'react';\r\nimport { Context } from '../../context/ContextProvider'\r\n\r\n\r\nconst ChatInterface = ({ }) => {\r\n\r\n    // Grab the elements from ContextProvider.js\r\n    const { chatMessagesAll, chatMessagesTeam, chat_sendToAll, chat_sendToTeam, hideAllChat, hideTeamChat } = useContext(Context);\r\n\r\n    // Variable for text box\r\n    const [textTeam, setTextTeam] = useState('');\r\n    const [textAll, setTextAll] = useState('');\r\n\r\n    // Variable for scrolling to bottom\r\n    const messagesEndRef = React.createRef()\r\n\r\n    // Send to all chat function\r\n    const sendToAll = () => {\r\n        chat_sendToAll(textAll);\r\n        setTextAll('');\r\n        scrollToBottom();\r\n    }\r\n\r\n    const sendToTeam = () => {\r\n        chat_sendToTeam(textTeam);\r\n        setTextTeam('');\r\n        scrollToBottom();\r\n    }\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n    // Handle the text field changes\r\n    const handleChangeAll = e => {\r\n        // set the value of value\r\n        setTextAll(e.target.value);\r\n    };\r\n\r\n    const handleChangeTeam = e => {\r\n        // set the value of value\r\n        setTextTeam(e.target.value);\r\n    };\r\n\r\n    // Return the actual chat box\r\n\r\n    return (\r\n        // Container for the chat box\r\n\r\n        <Box align=\"center\">\r\n            {!hideAllChat &&\r\n                <Grid container style={{ border: \"1px solid grey\", width: '50%' }}>\r\n                    <Grid item xs={12} align=\"center\">\r\n                        <Typography>Chat Box All</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <List id=\"ChatBoxMessagesAll\" style={{ maxHeight: '200px', width: '100%', overflow: 'auto' }}>\r\n                            {(chatMessagesAll && { chatMessagesAll }.chatMessagesAll.map(chatMessage => {\r\n                                return (\r\n                                    <ListItemText primary={`${chatMessage.alias}: ${chatMessage.message}`}/>\r\n                                )\r\n                            }))}\r\n                            <div ref={messagesEndRef} />\r\n                        </List>\r\n                    </Grid>\r\n                    <Grid item xs={8}>\r\n                        <TextField value={textAll} onChange={handleChangeAll} fullWidth variant=\"standard\" label=\"Send message all\" />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Button onClick={sendToAll} variant=\"outlined\">Send To All</Button>\r\n                    </Grid>\r\n                </Grid>}\r\n\r\n            {!hideTeamChat &&\r\n                <Grid container style={{ border: \"1px solid grey\", width: '50%' }}>\r\n                    <Grid item xs={12} align=\"center\">\r\n                        <Typography>Chat Box Team</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <List id=\"ChatBoxMessagesTeam\" style={{ maxHeight: '200px', width: '100%', overflow: 'auto' }}>\r\n                            {(chatMessagesTeam && { chatMessagesTeam }.chatMessagesTeam.map(chatMessage => {\r\n                                return (\r\n                                    <ListItemText primary={`${chatMessage.alias}: ${chatMessage.message}`} />\r\n                                )\r\n                            }))}\r\n                            <div ref={messagesEndRef} />\r\n                        </List>\r\n                    </Grid>\r\n                    <Grid item xs={8}>\r\n                        <TextField value={textTeam} onChange={handleChangeTeam} fullWidth variant=\"standard\" label=\"Send message team\" />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Button onClick={sendToTeam} variant=\"outlined\">Send To Team</Button>\r\n                    </Grid>\r\n                </Grid>}\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ChatInterface;","import './App.css';\r\n\r\nimport { useContext } from 'react';\r\nimport { Box, Typography } from '@material-ui/core'\r\nimport Layout from './components/Layout';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport HostInterface from './components/HostInterface/HostInterface';\r\nimport PlayerInterface from './components/PlayerInterface/PlayerInterface'\r\nimport { Context } from './context/ContextProvider';\r\n\r\nimport LobbyInterFace from './components/LobbyInterface/LobbyInterface';\r\nimport ChatInterface from './components/ChatInterface/ChatInterface';\r\n\r\n\r\nfunction App() {\r\n\r\n  const { isHost, isInLobby } = useContext(Context)\r\n\r\n\r\n  const TitleText = withStyles({\r\n    root: {\r\n      fontWeight: 600,\r\n      color: '#088F8F',\r\n\r\n    }\r\n  })(Typography);\r\n\r\n  return (\r\n    <Layout >\r\n      <Box align='center' >\r\n        <TitleText variant='h4' > CYBERBLOCK</ TitleText>\r\n      </Box>\r\n\r\n      <br></br>\r\n      <br></br>\r\n      {isInLobby\r\n        ?\r\n        <Box>\r\n          {isHost\r\n            ?\r\n            <HostInterface />\r\n            :\r\n            <PlayerInterface />}\r\n            <br/><br/><br/><br/>\r\n          <ChatInterface />\r\n        </Box>\r\n        :\r\n        <LobbyInterFace />\r\n\r\n      }\r\n      <br></br>\r\n\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ThemeContextProvider from './context/ContextProvider';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeContextProvider>\r\n      <App />\r\n    </ThemeContextProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}