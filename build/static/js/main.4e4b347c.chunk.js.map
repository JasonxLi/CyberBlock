{"version":3,"sources":["components/Icons/Icons.js","components/Layout/index.js","components/Layout/Layout.js","context/ContextProvider.js","components/ShuffleTeam/ShuffleTeam.js","components/HostConfiguration/HostConfiguration.js","components/HostInterface/HostInterface.js","components/PlayerInterface/PlayerInterface.js","components/GameInterface/GameInterface.js","components/LobbyInterface/LobbyInterface.js","App.js","reportWebVitals.js","index.js"],"names":["MedtronicsIcon","width","height","viewBox","xmlns","d","fill","Layout","children","Box","sx","overflow","positon","p","Divider","socket","io","connect","Context","createContext","ThemeContextProvider","useState","selectedDefenses","setSelectedDefenses","endBuyPhase","setEndBuyPhase","userEarnings","setUserEarnings","lobbyId","setLobbyId","rolledAttack","setRolledAttack","alias","setAlias","isInLobby","setIsInLobby","isHost","setIsHost","inBuyingPhase","setBuyingPhase","userDefenses","setUserDefenses","pointTable","setPointTable","nbOfRounds","setNbOfRounds","teamInfo","setTeamInfo","currentLead","setCurrentLead","roundCount","setRoundCount","useEffect","on","info","attack","defenses","host_create_lobby","nbOfTeams","nbOfDefenses","timeForEachRound","hasTriviaRound","difficulty","emit","points","Provider","value","roll","start_buy_phase","student_join_lobby","result","socketId","oldTeamId","newTeamId","ShuffleTeam","useContext","host_move_student","TableContainer","Table","minWidth","TableHead","TableRow","TableCell","align","map","item","index","TableBody","component","scope","child","FormControl","fullWidth","InputLabel","id","Select","label","onChange","event","target","MenuItem","HostConfiguration","setEndConfigurationPhase","setDifficulty","setTimeForEachRound","setHasTriviaRound","setNbOfTeams","m","maxWidth","Button","variant","onClick","HostInterface","setEndGame","endConfigurationPhase","boxStyling","Typography","Name","PlayerInterface","teamNumber","isLeader","isChecked","setIsChecked","getUserDefense","name","cost","currentIndex","tempIndex","length","defenseName","tempDefenseList","slice","removeDefense","defenseCost","tempDefense","defenseID","done","playerIndex","leadSwitch","Math","ceil","tempLeader","team","tempLeaderIndex","console","log","player","getMemberinfo","Card","CardContent","gutterBottom","color","row","style","Cost","FormGroup","FormControlLabel","control","Checkbox","checked","DefenseID","disabled","GameInterFace","attackId","setPoints","Grid","container","spacing","size","Attack_ID","Defense_ID","PointValue","LobbyInterFace","border","borderRadius","position","top","left","transform","Input","type","placeholder","App","TitleText","withStyles","root","fontWeight","GameInterface","AttackID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAEaA,EAAiB,WAC3B,OACG,qBAAKC,MAAM,QAAQC,OAAO,OAAOC,QAAQ,aAAaC,MAAM,6BAA5D,SAAyF,sBAAMC,EAAE,khEAAkhEC,KAAK,eCH/mEC,ECGA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAYd,OAEI,eAACC,EAAA,EAAD,CAAKC,GATa,CAClBC,SAAU,OACVC,QAAS,YAOT,UACI,eAACH,EAAA,EAAD,CAAKC,GAbA,CACTG,EAAG,QAYC,UACI,cAAC,EAAD,IACA,cAACC,EAAA,EAAD,OAGHN,M,iDCrBPO,E,OAASC,EAAGC,QAAQ,qCAEbC,EAAUC,wBAAc,IAmHtBC,EAjHc,SAAC,GAAkB,IAAD,EAAfZ,EAAe,EAAfA,SAC5B,EAAgDa,mBAAS,IAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAwCJ,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAAwCR,mBAAS,IAAjD,mBAAOS,EAAP,KAAqBC,EAArB,KACA,EAA0BV,mBAAS,IAAnC,mBAAOW,EAAP,KAAcC,EAAd,KACA,EAAkCZ,oBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KAEA,EAA4Bd,oBAAS,GAArC,mBAAOe,EAAP,KAAeC,EAAf,KACA,EAAwChB,oBAAS,GAAjD,mBAAOiB,EAAP,KAAsBC,EAAtB,KACA,EAAwClB,mBAAS,IAAjD,mBAAOmB,EAAP,KAAqBC,EAArB,KACA,EAAoCpB,mBAAS,IAA7C,mBAAOqB,EAAP,KAAmBC,EAAnB,KACA,EAAoCtB,mBAAS,GAA7C,oBAAOuB,GAAP,MAAmBC,GAAnB,MAEA,GAAgCxB,mBAAS,IAAzC,qBAAOyB,GAAP,MAAiBC,GAAjB,MACA,GAAuC1B,mBAAS,IAAhD,qBAAO2B,GAAP,MAAoBC,GAApB,MAEA,GAAoC5B,mBAAS,GAA7C,qBAAO6B,GAAP,MAAmBC,GAAnB,MAEAC,qBAAU,WACNrC,EAAOsC,GAAG,4BAA4B,SAACC,GACnCP,GAAYO,MAEhBvC,EAAOsC,GAAG,sBAAsB,SAACC,GAC7BP,GAAYO,MAIhBvC,EAAOsC,GAAG,gBAAgB,SAACE,GACvBxB,EAAgBwB,MAEpBxC,EAAOsC,GAAG,yBAAyB,SAACG,GAChCf,EAAgBe,GAChBjB,GAAe,QAGpB,CAACxB,IAEJ,IAYM0C,GAAoB,SAACC,EAAWd,EAAYe,EAAcC,EAAkBC,EAAgBC,GAC9F/C,EAAOgD,KAAK,oBAAqB,CAAEL,YAAWd,aAAYe,eAAcC,mBAAkBC,iBAAgBC,eAAc,SAAAlC,GACpHC,EAAWD,GACXS,GAAU,GACVF,GAAa,OAerB,OAJApB,EAAOsC,GAAG,uBAAuB,SAACW,GAC9BrB,EAAcqB,MAId,cAAC9C,EAAQ+C,SAAT,CACIC,OAAK,GACD5C,mBACAC,sBACAC,cACAC,iBACAC,eACAC,kBACAC,UACAC,aACAsC,KAtBC,SAACvC,GACVb,EAAOgD,KAAK,OAAQnC,IAsBZwC,gBAnBY,WACpBrD,EAAOgD,KAAK,kBAAmBnC,IAmBvBE,eACAC,kBACAG,YACAC,eACAC,SACAC,YACAC,gBACAE,eACAE,aACAe,qBACAY,mBAlDe,WACP,KAAZzC,GAA4B,KAAVI,IAClBjB,EAAOgD,KAAK,qBAAsB,CAAEnC,UAASI,UAAS,SAAAsC,OAEtDnC,GAAa,KA+CTS,cACAC,kBAvBC,kCAwBDY,IAxBC,yBAyBDxB,GAzBC,sBA0BDD,GA1BC,yBA2BDc,IA3BC,4BA4BDC,IA5BC,mCAjCa,SAACnB,EAAS2C,EAAUC,EAAWC,GACrD1D,EAAOgD,KAAK,oBAAqB,CAAEnC,UAAS2C,WAAUC,YAAWC,iBAgCxD,4BA8BDzB,IA9BC,+BA+BDC,IA/BC,2BAgCDC,IAhCC,8BAiCDC,IAjCC,GADT,SAqCK3C,K,0FCxDEkE,EAtDK,SAAC,GAAiB,EAAflE,SAAgB,IACnC,EAAiDmE,qBAAWzD,GAApD4B,EAAR,EAAQA,SAAU8B,EAAlB,EAAkBA,kBAAmBhD,EAArC,EAAqCA,QAMrC,OACI,cAACnB,EAAA,EAAD,UACI,cAACoE,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAOpE,GAAI,CAAEqE,SAAU,KAAO,aAAW,0BAAzC,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,CAAWC,MAAM,QAAQzE,GAAI,CAAEqE,SAAU,KAAzC,0BAGPjC,EAASsC,KAAI,SAACC,EAAMC,GACjB,OACI,cAACC,EAAA,EAAD,UACI,eAACN,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAWM,UAAU,KAAKC,MAAM,QAAhC,kBACUH,EAAQ,KAEjBD,EAAKD,KAAI,SAAAM,GACN,OACI,eAACR,EAAA,EAAD,CAAWC,MAAM,QAAjB,UACKO,EAAM1D,MAEP,eAAC2D,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACI,cAACC,EAAA,EAAD,CAAYC,GAAG,qBAAf,oBACA,cAACC,EAAA,EAAD,CACIC,MAAM,QACNC,SAAU,SAACC,GAAD,OA9BxCzB,EA8BgEyB,EAAMC,OAAOjC,MA9BlEK,EA8ByEmB,EAAMnB,cA7B5GK,EAAkBhD,EAAS2C,EA6B2Fe,EA7BtEb,GAD/B,IAACA,EAAWF,GA4Be,SAIKzB,EAASsC,KAAI,SAACC,EAAMC,GAAP,OACV,cAACc,EAAA,EAAD,CAAUlC,MAAOoB,EAAjB,SAAyBA,EAAQ,oBAhB9CA,EAAQ,gBC6ExCe,EAjGW,SAAC,GAA2C,EAAzC7F,SAA0C,IAAhC8F,EAA+B,EAA/BA,yBAEnC,EAAyD3B,qBAAWzD,GAA5D2B,EAAR,EAAQA,cAAeY,EAAvB,EAAuBA,kBAAmBb,EAA1C,EAA0CA,WAE1C,EAAoCvB,mBAAS,GAA7C,mBAAOyC,EAAP,KAAmByC,EAAnB,KACA,EAAgDlF,mBAAS,GAAzD,mBAAOuC,EAAP,KAAyB4C,EAAzB,KACA,EAA4CnF,oBAAS,GAArD,mBAAOwC,EAAP,KAAuB4C,EAAvB,KACA,EAAkCpF,mBAAS,GAA3C,mBAAOqC,EAAP,KAAkBgD,EAAlB,KACA,EAAwCrF,mBAAS,GAAjD,mBAAOsC,EAAP,UAmBA,OAEI,eAAClD,EAAA,EAAD,CAAKC,GAnBc,CACnBiG,EAAG,OACH9F,EAAG,OACH+F,SAAU,KAgBV,UAEI,eAACjB,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACI,cAACC,EAAA,EAAD,CAAYC,GAAG,qBAAf,mBACA,eAACC,EAAA,EAAD,CACIC,MAAM,QACNC,SAAU,SAACC,GAAD,OAAWrD,EAAcqD,EAAMC,OAAOjC,QAFpD,UAII,cAACkC,EAAA,EAAD,CAAUlC,MAAO,EAAjB,eACA,cAACkC,EAAA,EAAD,CAAUlC,MAAO,EAAjB,eACA,cAACkC,EAAA,EAAD,CAAUlC,MAAO,GAAjB,sBAIR,eAACyB,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACI,cAACC,EAAA,EAAD,CAAYC,GAAG,0BAAf,wBACA,eAACC,EAAA,EAAD,CACIC,MAAM,aACNC,SAAU,SAACC,GAAD,OAAWK,EAAcL,EAAMC,OAAOjC,QAFpD,UAII,cAACkC,EAAA,EAAD,CAAUlC,MAAO,EAAjB,sBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAO,EAAjB,0BACA,cAACkC,EAAA,EAAD,CAAUlC,MAAO,EAAjB,0BAIR,eAACyB,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACI,cAACC,EAAA,EAAD,CAAYC,GAAG,gCAAf,4BACA,eAACC,EAAA,EAAD,CACIC,MAAM,mBACNC,SAAU,SAACC,GAAD,OAAWM,EAAoBN,EAAMC,OAAOjC,QAF1D,UAII,cAACkC,EAAA,EAAD,CAAUlC,MAAO,GAAjB,qBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAO,GAAjB,qBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAO,GAAjB,2BAIR,eAACyB,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACI,cAACC,EAAA,EAAD,CAAYC,GAAG,8BAAf,4BACA,eAACC,EAAA,EAAD,CACIC,MAAM,iBACNC,SAAU,SAACC,GAAD,OAAWO,EAAkBP,EAAMC,OAAOjC,QAFxD,UAII,cAACkC,EAAA,EAAD,CAAUlC,MAAO,EAAjB,eACA,cAACkC,EAAA,EAAD,CAAUlC,MAAO,EAAjB,qBAIR,eAACyB,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACI,cAACC,EAAA,EAAD,CAAYC,GAAG,sBAAf,0BACA,eAACC,EAAA,EAAD,CACIC,MAAM,YACNC,SAAU,SAACC,GAAD,OAAWQ,EAAaR,EAAMC,OAAOjC,QAFnD,UAII,cAACkC,EAAA,EAAD,CAAUlC,MAAO,EAAjB,eACA,cAACkC,EAAA,EAAD,CAAUlC,MAAO,EAAjB,qBAGR,uBACA,uBACA,cAAC2C,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QApEd,WAClBT,GAAyB,GACzB7C,EAAkBC,EAAWd,EAAYe,EAAcC,EAAkBC,EAAgBC,IAkErF,yBCzBGkD,EA9DO,SAAC,GAAS,eAE5B,MAAiGrC,qBAAWzD,GAApGU,EAAR,EAAQA,QAASuC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,gBAAiBtC,EAAxC,EAAwCA,aAAcc,EAAtD,EAAsDA,WAAYM,EAAlE,EAAkEA,WAAYC,EAA9E,EAA8EA,cAE9E,EAA8B9B,oBAAS,GAAvC,mBAAgB4F,GAAhB,WACA,EAA0D5F,oBAAS,GAAnE,mBAAO6F,EAAP,KAA8BZ,EAA9B,KAEMa,EAAa,CACfR,EAAG,OACH9F,EAAG,QAkBP,OACI,cAACJ,EAAA,EAAD,UACKyG,EAEO,eAACzG,EAAA,EAAD,CAAKC,GAAIyG,EAAT,UACI,cAACC,EAAA,EAAD,CAAYjC,MAAM,SAAS2B,QAAQ,KAAnC,2CAAoElF,EAApE,eACA,eAACnB,EAAA,EAAD,CAAKC,GAAIyG,EAAT,UAEI,cAACN,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAZnC,WACb3C,EAAgBxC,IAWI,wBACA,uBACA,uBACA,cAACiF,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QA1BlC,WACV7D,IAAeN,GACfuB,EAAKvC,GACLuB,EAAcD,EAAa,IAG3B+D,GAAW,IAoBK,4BAEJ,uBACA,uBAEqB,KAAjBnF,GACA,cAACsF,EAAA,EAAD,+BAA2BtF,EAAauF,QAE5C,uBACA,uBACA,cAAC,EAAD,OAKP,cAAC,EAAD,CAAmBf,yBAA0BA,O,6DC2H/CgB,EAlLS,SAAC,GAAuB,IAArB9E,EAAoB,EAApBA,aAEvB,EAAuKmC,qBAAWzD,GAA1KI,EAAR,EAAQA,iBAAkBC,EAA1B,EAA0BA,oBAAqBE,EAA/C,EAA+CA,eAAgBC,EAA/D,EAA+DA,aAAcC,EAA7E,EAA6EA,gBAAiBK,EAA9F,EAA8FA,MAAOc,EAArG,EAAqGA,SAAUE,EAA/G,EAA+GA,YAAaE,EAA5H,EAA4HA,WAAYN,EAAxI,EAAwIA,WAAYK,EAApJ,EAAoJA,eAMhJsE,EAAa,EAEjB,EAAgClG,oBAAS,GAAzC,mBAAOmG,EAAP,KACA,GADA,KACkCnG,mBAAS,KAA3C,mBAAOoG,EAAP,KAAkBC,EAAlB,KAWMC,EAAiB,SAACzD,EAAO0D,EAAMC,EAAMvC,EAAOQ,GAE9C,IAAMgC,EAAY,YAAOL,GACrBM,EAAS,eAAQD,EAAaxC,IAMlC,GALAyC,EAAY7D,EACZ4D,EAAaxC,GAASyC,EACtBL,EAAaI,IAGR5D,GAAS5C,EAAiB0G,OAAS,GAAKtG,EAAe,EACxDJ,EAAiB8D,KAAI,SAACC,EAAMC,GACpBD,EAAK4C,cAAgBL,GApBf,SAACtC,EAAOuC,GAE1B,IAAMK,EAAe,sBACd5G,EAAiB6G,MAAM,EAAG7C,IADZ,YAEdhE,EAAiB6G,MAAM7C,EAAQ,EAAGhE,EAAiB0G,UAE1DzG,EAAoB2G,GACpBvG,EAAgBD,EAAemG,GAcnBO,CAAc9C,EAAOD,EAAKgD,qBAIjC,GAAInE,GAAS5C,EAAiB0G,QAAU,GAAKtG,EAAe,EAAG,CAChE,IAAM4G,EAAc,CAChBL,YAAaL,EACbS,YAAaR,EACbU,UAAWzC,EACX0C,KAAMtE,GAEV3C,EAAoB,GAAD,mBAAKD,GAAL,CAAuBgH,KAEtC3G,EAAgBD,EAAemG,KA+C3C,OAnCsB,WAClB,IAAIY,EAAc,EAEZC,EAAa9F,EAAaE,EAASkF,OAEzC,GAAI9E,EAAayF,KAAKC,KAAKF,KAAgB,EAAG,CAC1C,IAAMG,EAAU,YAAO7F,GACvBF,EAASsC,KAAI,SAAC0D,EAAMxD,GAEhB,IAAIyD,EAAe,eAAQF,EAAWvD,IACtCyD,EAAkBD,EAAKL,GAAalE,SACpCsE,EAAWvD,GAASyD,EACpBC,QAAQC,IAAIJ,GACZ5F,EAAe4F,MAGnBJ,IAEJO,QAAQC,IAAIjG,GACZF,EAASsC,KAAI,SAAC0D,EAAMxD,GAChBwD,EAAK1D,KAAI,SAAA8D,GACDA,EAAOlH,QAAUA,IACjBuF,EAAajC,EAAQ,SAUrC6D,GACAH,QAAQC,IAAIjG,GAGR,eAACvC,EAAA,EAAD,CAAKC,GA5FU,CACfG,EAAG,EACHkE,SAAU,OA0FV,UACI,cAACqE,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACjC,EAAA,EAAD,CAAYkC,cAAY,EAAxB,SACKtH,IAEL,eAACoF,EAAA,EAAD,CAAYkC,cAAY,EAAxB,6BAEqB/B,KAEpBC,EACG,cAACJ,EAAA,EAAD,CAAYkC,cAAY,EAAxB,wCAKA,cAAClC,EAAA,EAAD,SAKZ,uBACA,uBAEA,eAACA,EAAA,EAAD,CAAYN,QAAQ,KAAKyC,MAAM,iBAAiBD,cAAY,EAA5D,uBACe5H,KAGf,uBACA,uBACA,cAACmD,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAOpE,GAAI,CAAEqE,SAAU,KAAO,aAAW,0BAAzC,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,uBACA,cAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,kBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,6BAIR,cAACI,EAAA,EAAD,UAEK/C,EAAa4C,KAAI,SAACoE,EAAKlE,GAAN,OACd,eAACL,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWM,UAAU,KAAKC,MAAM,MAAhC,SACK+D,EAAInC,OAET,cAACnC,EAAA,EAAD,CAAWuE,MAAO,CAAExJ,MAAO,KAAOkF,MAAM,QAAxC,SACKqE,EAAIE,OAGT,cAACxE,EAAA,EAAD,CAAWuE,MAAO,CAAExJ,MAAO,KAAOkF,MAAM,QAAxC,SACI,cAACQ,EAAA,EAAD,CAAaH,UAAU,WAAWsB,QAAQ,WAA1C,SACI,cAAC6C,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CAEI7D,SAAU,SAACC,GAAD,OAAWyB,EAAezB,EAAMC,OAAO4D,QAASP,EAAInC,KAAMmC,EAAIE,KAAMpE,EAAOkE,EAAIQ,YACzFC,SAAUT,EAAIE,KAAOhI,IAAiB+F,EAAUnC,MAAyBkC,EACzEuC,QAAStC,EAAUnC,IAHdkE,EAAIxD,iBAdtBwD,EAAInC,gBAgClB,uBACjB,cAACR,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMtF,GAAe,IAA1D,wB,SCtHGyI,EArDO,SAAC,GAA4C,IAA1CpI,EAAyC,EAAzCA,aAAcqI,EAA2B,EAA3BA,SAAUzH,EAAiB,EAAjBA,WAErCpB,EAAqBqD,qBAAWzD,GAAhCI,iBACR,EAA4BD,mBAAS,GAArC,mBAAO2C,EAAP,KAAeoG,EAAf,KAgBA,OACI,eAAC3J,EAAA,EAAD,CAAKC,GAfU,CACfiG,EAAG,OACH9F,EAAG,QAaH,UACI,eAACuG,EAAA,EAAD,CAAYmC,MAAM,iBAAlB,oBAA4CvF,KAE5C,cAACvD,EAAA,EAAD,CAAKC,GAAI,CAAEiG,EAAG,QAAd,SACI,cAACyC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAACjC,EAAA,EAAD,CAAYjC,MAAM,SAAS2B,QAAQ,KAAKyC,MAAM,iBAAiBD,cAAY,EAA3E,kCACuBxH,EAAauF,KADpC,aAMZ,cAACgD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SAEKjJ,EAAiB8D,KAAI,SAAAC,GAClB,OACI,cAACgF,EAAA,EAAD,CAAMhF,MAAI,EAAV,SACI,cAACwB,EAAA,EAAD,CAAQC,QAAQ,YAAY0D,KAAK,QAAQjB,MAAM,OAAOxC,QAAS,kBA3BjEwB,EA2BoFlD,EAAKkD,eAzB3G7F,EAAW0C,KAAI,SAACC,GACRA,EAAKoF,YAAcN,GAAY9E,EAAKqF,aAAenC,GACnD6B,EAAUpG,EAASqB,EAAKsF,eAJf,IAACpC,GA2BE,SACI,cAACnB,EAAA,EAAD,CAAYN,QAAQ,KAAK3B,MAAM,SAASoE,MAAM,iBAAiBD,cAAY,EAA3E,SACKjE,EAAK4C,2B,SCN3B2C,EAlCQ,SAAC,GAAiB,EAAfpK,SAAgB,IACxC,EAA8EmE,qBAAWzD,GAAjFW,EAAR,EAAQA,WAAYM,EAApB,EAAoBA,aAAcE,EAAlC,EAAkCA,UAAWgC,EAA7C,EAA6CA,mBAAoBpC,EAAjE,EAAiEA,SAcjE,OACE,eAACxB,EAAA,EAAD,CAAKC,GAbY,CACjBG,EAAG,EACHgK,OAAQ,kBACRC,aAAc,OACd7K,MAAO,IACPkF,MAAO,SACP4F,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,yBAIX,UACE,cAACrE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,WAAQ5E,GAAa,GAAOE,GAAU,IAA3E,0BACA,oCAEA,cAAC8I,EAAA,EAAD,CAAOC,KAAK,OAAOC,YAAY,iBAAiBpF,SAAU,SAACC,GAAD,OAAWrE,EAAWqE,EAAMC,OAAOjC,UAC7F,uBACA,uBACA,cAACiH,EAAA,EAAD,CAAOC,KAAK,OAAOC,YAAY,aAAapF,SAAU,SAACC,GAAD,OAAWjE,EAASiE,EAAMC,OAAOjC,UACvF,uBACA,uBACA,cAAC2C,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAM1C,KAA3C,4BC0BSiH,MA5Cf,WAEE,MAAkG3G,qBAAWzD,GAArGM,EAAR,EAAQA,YAAaM,EAArB,EAAqBA,aAAcM,EAAnC,EAAmCA,OAAQF,EAA3C,EAA2CA,UAAWI,EAAtD,EAAsDA,cAAeE,EAArE,EAAqEA,aAAcE,EAAnF,EAAmFA,WAG7E6I,EAAYC,YAAW,CAC3BC,KAAM,CACJC,WAAY,IACZnC,MAAO,YAHOiC,CAMfpE,KAEH,OACE,eAAC,EAAD,WACE,cAAC3G,EAAA,EAAD,CAAK0E,MAAM,SAAX,SACE,cAACoG,EAAD,CAAWzE,QAAQ,KAAnB,2BAGF,uBACA,uBACE5E,EAIAE,EAEE,cAAC,EAAD,IAEA,cAAC3B,EAAA,EAAD,UACG6B,IAAkBd,EAEjB,eAAC4F,EAAA,EAAD,eAAc,cAAC,EAAD,CAAiB5E,aAAcA,IAA7C,OAEiB,KAAjBV,GACA,cAAC6J,EAAD,CAAe7J,aAAcA,EAAcqI,SAAUrI,EAAa8J,SAAUlJ,WAAYA,MAZ9F,cAAC,EAAD,QCxBOmJ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.4e4b347c.chunk.js","sourcesContent":["import { Icon } from '@material-ui/core'\r\n\r\nexport const MedtronicsIcon = () => {\r\n   return (\r\n      <svg width=\"150px\" height=\"50px\" viewBox=\"0 0 35 15 \" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m8.884 3.295c-.047-.582-.35-.923-.962-.923-.565 0-.914.357-.976.923zm.914.217c0 .186-.015.38-.046.535h-2.79c.1.465.495.752 1.24.752h.01l.007-.001a3.128 3.128 0 0 0 .212-.01l.058-.004a2.7 2.7 0 0 0 .874-.241l.064-.031c.055-.028.108-.058.16-.089h.024v.785c-.408.247-.887.39-1.4.39v-.003l-.055.002c-1.404 0-2.171-.798-2.171-1.961 0-1.248.79-2.07 1.938-2.07s1.876.814 1.876 1.946m-9.667 2.007h.954l.178-3.34.039-.907h.015l.202.907.775 3.34h1.195l.783-3.34.193-.907h.016l.039.907.186 3.34h.992l-.327-5.348h-1.58l-.714 3.21-.155.813h-.015l-.163-.814-.713-3.209h-1.582zm16.41.078c-.89 0-1.395-.41-1.395-1.34v-1.83h-1.07v1.945c0 .287.11.403.342.403.054 0 .116 0 .186-.015h.023v.76a2.082 2.082 0 0 1 -.418.046c-.528 0-.853-.201-.993-.643-.279.434-.72.674-1.27.674-.985 0-1.784-.767-1.784-2.023 0-1.24.799-2.008 1.783-2.008.488 0 .892.186 1.17.527v-1.922h.962v1.473h1.07v-.924h.96v.923h1.032v.783h-1.031v1.784c0 .387.193.573.566.573.17 0 .286-.015.441-.054h.024v.79a2.625 2.625 0 0 1 -.597.078m-4.395-.814c.65 0 1.015-.503 1.015-1.209 0-.698-.364-1.202-1.015-1.202-.66 0-1 .504-1 1.202 0 .706.34 1.21 1 1.21m6.38-1.295c0-.628.325-.977.945-.977.108 0 .225.015.333.047h.016v-.9a1.087 1.087 0 0 0 -.38-.062c-.465 0-.775.287-.954.752v-.705h-.922v3.876h.961zm3.348 2.108c-1.217 0-2.039-.884-2.039-2.015s.822-2.016 2.04-2.016c1.208 0 2.03.884 2.03 2.016s-.822 2.015-2.03 2.015m0-.83c.689 0 1.045-.503 1.045-1.185s-.356-1.186-1.046-1.186c-.674 0-1.054.503-1.054 1.186s.38 1.186 1.054 1.186m3.506-1.411c0-.597.302-.985.86-.985.55 0 .807.365.807.985v2.163h.96v-2.202c0-.93-.48-1.752-1.526-1.752-.558 0-.93.28-1.14.698v-.62h-.922v3.876h.961zm4.325-2.659c0 .31-.248.574-.573.574a.57.57 0 1 1 .573-.574m.536 4.822a2.392 2.392 0 0 1 -.473.054c-.737 0-1.132-.388-1.132-1.1v-2.83h.969v2.76c0 .255.124.38.388.38.061 0 .139-.009.224-.024h.024zm.092-1.938c0-1.132.822-2.016 2.047-2.016.349 0 .744.086 1.039.248v.853h-.024a1.8 1.8 0 0 0 -.945-.264c-.737 0-1.132.504-1.132 1.179s.395 1.178 1.132 1.178a1.8 1.8 0 0 0 .945-.264h.024v.853c-.295.163-.69.248-1.04.248-1.224 0-2.046-.884-2.046-2.015\" fill=\"#224a87\" /></svg>\r\n   );\r\n}","import Layout from \"./Layout\";\r\nexport default Layout;","import * as React from 'react';\r\nimport { Box, Divider, Typography } from '@material-ui/core'\r\nimport { MedtronicsIcon } from '../Icons/Icons'\r\n\r\nconst Layout = ({ children }) => {\r\n\r\n    const base = {\r\n        p: '2rem',\r\n    }\r\n    const layoutStyling = {\r\n        overflow: 'auto',\r\n        positon: 'relative',\r\n        //minHeight:'100vh',\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <Box sx={layoutStyling}  >\r\n            <Box sx={base}>\r\n                <MedtronicsIcon />\r\n                <Divider />\r\n            </Box>\r\n\r\n            {children}\r\n\r\n            {/* <Box sx={base} sx={{position:'sticky', bottom : '0'}} >\r\n            \r\n                <Typography >CopyRights Reserved 2021</Typography>\r\n            \r\n            </Box> */}\r\n        </Box>\r\n\r\n    )\r\n}\r\nexport default Layout;","import React, { createContext, useState, useEffect } from 'react';\r\n\r\nimport io from 'socket.io-client'\r\nconst socket = io.connect(\"https://cyberblock.herokuapp.com/\");\r\n\r\nexport const Context = createContext({});\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n    const [selectedDefenses, setSelectedDefenses] = useState([]);\r\n    const [endBuyPhase, setEndBuyPhase] = useState(false);\r\n    const [userEarnings, setUserEarnings] = useState(30);\r\n    const [lobbyId, setLobbyId] = useState(\"\");\r\n    const [rolledAttack, setRolledAttack] = useState(\"\");\r\n    const [alias, setAlias] = useState(\"\");\r\n    const [isInLobby, setIsInLobby] = useState(false);\r\n\r\n    const [isHost, setIsHost] = useState(false);\r\n    const [inBuyingPhase, setBuyingPhase] = useState(false);\r\n    const [userDefenses, setUserDefenses] = useState([]);\r\n    const [pointTable, setPointTable] = useState([]);\r\n    const [nbOfRounds, setNbOfRounds] = useState(0);\r\n\r\n    const [teamInfo, setTeamInfo] = useState([]);\r\n    const [currentLead, setCurrentLead,] = useState([]);\r\n\r\n    const [roundCount, setRoundCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        socket.on(\"new_student_joined_lobby\", (info) => {\r\n            setTeamInfo(info)\r\n        })\r\n        socket.on(\"host_moved_student\", (info) => {\r\n            setTeamInfo(info)\r\n\r\n        })\r\n\r\n        socket.on(\"receive_roll\", (attack) => {\r\n            setRolledAttack(attack);\r\n        })\r\n        socket.on(\"receive_defense_cards\", (defenses) => {\r\n            setUserDefenses(defenses);\r\n            setBuyingPhase(true)\r\n\r\n        })\r\n    }, [socket])\r\n\r\n    const host_move_student = (lobbyId, socketId, oldTeamId, newTeamId) => {\r\n        socket.emit(\"host_move_student\", { lobbyId, socketId, oldTeamId, newTeamId });\r\n    }\r\n\r\n    const student_join_lobby = () => {\r\n        if (lobbyId !== \"\" && alias !== \"\") {\r\n            socket.emit(\"student_join_lobby\", { lobbyId, alias }, result => {\r\n            })\r\n            setIsInLobby(true)\r\n        }\r\n    }\r\n\r\n    const host_create_lobby = (nbOfTeams, nbOfRounds, nbOfDefenses, timeForEachRound, hasTriviaRound, difficulty) => {\r\n        socket.emit(\"host_create_lobby\", { nbOfTeams, nbOfRounds, nbOfDefenses, timeForEachRound, hasTriviaRound, difficulty }, lobbyId => {\r\n            setLobbyId(lobbyId);\r\n            setIsHost(true);\r\n            setIsInLobby(true);\r\n        })\r\n    }\r\n\r\n    const roll = (lobbyId) => {\r\n        socket.emit(\"roll\", lobbyId);\r\n    }\r\n\r\n    const start_buy_phase = () => {\r\n        socket.emit(\"start_buy_phase\", lobbyId)\r\n    }\r\n    socket.on(\"receive_point_table\", (points) => {\r\n        setPointTable(points);\r\n    })\r\n\r\n    return (\r\n        <Context.Provider\r\n            value={{\r\n                selectedDefenses,\r\n                setSelectedDefenses,\r\n                endBuyPhase,\r\n                setEndBuyPhase,\r\n                userEarnings,\r\n                setUserEarnings,\r\n                lobbyId,\r\n                setLobbyId,\r\n                roll,\r\n                start_buy_phase,\r\n                rolledAttack,\r\n                setRolledAttack,\r\n                isInLobby,\r\n                setIsInLobby,\r\n                isHost,\r\n                setIsHost,\r\n                inBuyingPhase,\r\n                userDefenses,\r\n                pointTable,\r\n                host_create_lobby,\r\n                student_join_lobby,\r\n                nbOfRounds,\r\n                setNbOfRounds,\r\n                host_create_lobby,\r\n                setAlias,\r\n                alias,\r\n                teamInfo,\r\n                setTeamInfo,\r\n                host_move_student,\r\n                currentLead,\r\n                setCurrentLead,\r\n                roundCount,\r\n                setRoundCount,\r\n            }}\r\n        >\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n\r\n}\r\nexport default ThemeContextProvider;","import * as React from 'react';\r\nimport { Box, TableContainer, Table, TableBody, TableRow, TableCell, TableHead, FormControl, InputLabel, Select, MenuItem, } from '@material-ui/core'\r\nimport { useContext } from 'react';\r\nimport { Context } from '../../context/ContextProvider'\r\n\r\nconst ShuffleTeam = ({ children }) => {\r\n    const { teamInfo, host_move_student, lobbyId } = useContext(Context);\r\n\r\n    const handleChange = (newTeamId, socketId, oldTeamId) => {\r\n        host_move_student(lobbyId, socketId, oldTeamId, newTeamId)\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <TableContainer >\r\n                <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\r\n                    <TableHead >\r\n                        <TableRow>\r\n                            <TableCell >Team</TableCell>\r\n                            <TableCell align=\"right\" sx={{ minWidth: 300 }}>Members</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    {teamInfo.map((item, index) => {\r\n                        return (\r\n                            <TableBody>\r\n                                <TableRow key={index + 1}>\r\n                                    <TableCell component=\"th\" scope=\"child\">\r\n                                        Team {index + 1}\r\n                                    </TableCell>\r\n                                    {item.map(child => {\r\n                                        return (\r\n                                            <TableCell align=\"right\">\r\n                                                {child.alias}\r\n\r\n                                                <FormControl fullWidth >\r\n                                                    <InputLabel id=\"select-label-round\" >Switch</InputLabel>\r\n                                                    <Select\r\n                                                        label=\"Round\"\r\n                                                        onChange={(event) => handleChange(event.target.value, child.socketId, index)}\r\n                                                    >\r\n                                                        {teamInfo.map((item, index) =>\r\n                                                            <MenuItem value={index}>{index + 1}</MenuItem>\r\n                                                        )}\r\n                                                    </Select>\r\n                                                </FormControl>\r\n                                            </TableCell>\r\n                                        )\r\n                                    })}\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        )\r\n                    })}\r\n                </Table>\r\n            </TableContainer>\r\n        </Box>\r\n    )\r\n\r\n\r\n}\r\nexport default ShuffleTeam;\r\n","import * as React from 'react';\r\nimport { Box, FormControl, InputLabel, Select, MenuItem, Button } from '@material-ui/core'\r\nimport { useState, useContext } from 'react';\r\nimport { Context } from '../../context/ContextProvider'\r\n\r\nconst HostConfiguration = ({ children, setEndConfigurationPhase }) => {\r\n\r\n    const { setNbOfRounds, host_create_lobby, nbOfRounds } = useContext(Context);\r\n\r\n    const [difficulty, setDifficulty] = useState(1);\r\n    const [timeForEachRound, setTimeForEachRound] = useState(0);\r\n    const [hasTriviaRound, setHasTriviaRound] = useState(false);\r\n    const [nbOfTeams, setNbOfTeams] = useState(2);\r\n    const [nbOfDefenses, setNbOfDefenses] = useState(2);\r\n\r\n    const formControlBox = {\r\n        m: '20px',\r\n        p: '10px',\r\n        maxWidth: 140,\r\n    }\r\n    const outerBoxStyling = {\r\n        display: 'flex',\r\n        flexWrap: 'nowrap',\r\n        mt: '80px',\r\n        mx: '40px'\r\n    }\r\n\r\n    const handleOnClick = () => {\r\n        setEndConfigurationPhase(true);\r\n        host_create_lobby(nbOfTeams, nbOfRounds, nbOfDefenses, timeForEachRound, hasTriviaRound, difficulty)\r\n    }\r\n\r\n    return (\r\n\r\n        <Box sx={formControlBox}>\r\n\r\n            <FormControl fullWidth>\r\n                <InputLabel id=\"select-label-round\">Round</InputLabel>\r\n                <Select\r\n                    label=\"Round\"\r\n                    onChange={(event) => setNbOfRounds(event.target.value)}\r\n                >\r\n                    <MenuItem value={5}>5</MenuItem>\r\n                    <MenuItem value={8}>8</MenuItem>\r\n                    <MenuItem value={10}>10</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl fullWidth>\r\n                <InputLabel id=\"select-label-difficulty\">Difficulty</InputLabel>\r\n                <Select\r\n                    label=\"Difficulty\"\r\n                    onChange={(event) => setDifficulty(event.target.value)}\r\n                >\r\n                    <MenuItem value={1}>Beginner</MenuItem>\r\n                    <MenuItem value={2}>Intermediate</MenuItem>\r\n                    <MenuItem value={3}>Expert</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl fullWidth>\r\n                <InputLabel id=\"select-label-timeForEachRound\">Time per Round</InputLabel>\r\n                <Select\r\n                    label=\"timeForEachRound\"\r\n                    onChange={(event) => setTimeForEachRound(event.target.value)}\r\n                >\r\n                    <MenuItem value={30}>30 secs</MenuItem>\r\n                    <MenuItem value={60}>60 secs</MenuItem>\r\n                    <MenuItem value={90}>90 secs</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl fullWidth>\r\n                <InputLabel id=\"select-label-hasTriviaRound\"> Trivia Rounds</InputLabel>\r\n                <Select\r\n                    label=\"hasTriviaRound\"\r\n                    onChange={(event) => setHasTriviaRound(event.target.value)}\r\n                >\r\n                    <MenuItem value={2}>2</MenuItem>\r\n                    <MenuItem value={5}>5</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl fullWidth>\r\n                <InputLabel id=\"select-label-TeamNo\"> No of teams</InputLabel>\r\n                <Select\r\n                    label=\"nbOfTeams\"\r\n                    onChange={(event) => setNbOfTeams(event.target.value)}\r\n                >\r\n                    <MenuItem value={2}>2</MenuItem>\r\n                    <MenuItem value={3}>3</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n            <br></br>\r\n            <br></br>\r\n            <Button variant=\"contained\" onClick={handleOnClick}>Submit </Button>\r\n\r\n        </Box>\r\n\r\n    );\r\n}\r\n\r\nexport default HostConfiguration;","import * as React from 'react';\r\nimport { Box, Button, Typography } from '@material-ui/core'\r\nimport { useState, useContext } from 'react';\r\nimport { Context } from '../../context/ContextProvider'\r\nimport ShuffleTeam from '../ShuffleTeam/ShuffleTeam';\r\nimport HostConfiguration from '../HostConfiguration/HostConfiguration';\r\n\r\n\r\nconst HostInterface = ({ }) => {\r\n\r\n    const { lobbyId, roll, start_buy_phase, rolledAttack, nbOfRounds, roundCount, setRoundCount, } = useContext(Context);\r\n\r\n    const [endGame, setEndGame] = useState(false);\r\n    const [endConfigurationPhase, setEndConfigurationPhase] = useState(false);\r\n\r\n    const boxStyling = {\r\n        m: '20px',\r\n        p: '10px',\r\n    }\r\n\r\n    const rollPhase = () => {\r\n        if (roundCount !== nbOfRounds) {\r\n            roll(lobbyId);\r\n            setRoundCount(roundCount + 1)\r\n        }\r\n        else {\r\n            setEndGame(true)\r\n        }\r\n    }\r\n\r\n\r\n    const buyPhase = () => {\r\n        start_buy_phase(lobbyId);\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            {endConfigurationPhase ?\r\n                (\r\n                    <Box sx={boxStyling} >\r\n                        <Typography align='center' variant='h6'>{`Lobby created, use code ${lobbyId} to join.`}</Typography>\r\n                        <Box sx={boxStyling}>\r\n\r\n                            <Button variant=\"contained\" onClick={buyPhase}>Start Game</Button>\r\n                            <br></br>\r\n                            <br></br>\r\n                            <Button variant=\"contained\" onClick={rollPhase}>Roll Attack</Button>\r\n                        </Box>\r\n                        <br></br>\r\n                        <br></br>\r\n                        {\r\n                            rolledAttack !== \"\" &&\r\n                            <Typography>{`You rolled ${rolledAttack.Name}`}</Typography>\r\n                        }\r\n                        <br></br>\r\n                        <br></br>\r\n                        <ShuffleTeam />\r\n\r\n                    </Box>\r\n                )\r\n                :\r\n                (<HostConfiguration setEndConfigurationPhase={setEndConfigurationPhase} />)\r\n\r\n            }\r\n\r\n        </Box>\r\n\r\n\r\n    )\r\n}\r\nexport default HostInterface;","import * as React from 'react';\r\nimport { useState, useContext, useEffect } from 'react';\r\nimport { Box, Typography, TableContainer, Table, TableBody, TableRow, TableCell, Button, TableHead, FormGroup, FormControl, FormControlLabel, Checkbox, Card, CardContent } from '@material-ui/core'\r\nimport { Context } from '../../context/ContextProvider';\r\n\r\n\r\nconst PlayerInterface = ({ userDefenses, }) => {\r\n\r\n    const { selectedDefenses, setSelectedDefenses, setEndBuyPhase, userEarnings, setUserEarnings, alias, teamInfo, currentLead, roundCount, nbOfRounds, setCurrentLead } = useContext(Context)\r\n    const boxStyling = {\r\n        p: 6,\r\n        minWidth: '85%'\r\n    }\r\n\r\n    var teamNumber = 0;\r\n\r\n    const [isLeader, setisLeader] = useState(false)\r\n    const [isChecked, setIsChecked] = useState([]);\r\n\r\n    const removeDefense = (index, cost) => {\r\n\r\n        const tempDefenseList = [\r\n            ...selectedDefenses.slice(0, index),\r\n            ...selectedDefenses.slice(index + 1, selectedDefenses.length)\r\n        ]\r\n        setSelectedDefenses(tempDefenseList);\r\n        setUserEarnings(userEarnings + cost);\r\n    }\r\n    const getUserDefense = (value, name, cost, index, id) => {\r\n\r\n        const currentIndex = [...isChecked];\r\n        let tempIndex = { ...currentIndex[index] }\r\n        tempIndex = value;\r\n        currentIndex[index] = tempIndex\r\n        setIsChecked(currentIndex)\r\n\r\n\r\n        if (!value && selectedDefenses.length > 0 && userEarnings > 0) {\r\n            selectedDefenses.map((item, index) => {\r\n                if (item.defenseName === name) {\r\n                    removeDefense(index, item.defenseCost)\r\n                }\r\n            })\r\n        }\r\n        else if (value && selectedDefenses.length >= 0 && userEarnings > 0) {\r\n            const tempDefense = {\r\n                defenseName: name,\r\n                defenseCost: cost,\r\n                defenseID: id,\r\n                done: value\r\n            }\r\n            setSelectedDefenses([...selectedDefenses, tempDefense])\r\n            if (userEarnings - cost >= 8) {\r\n                setUserEarnings(userEarnings - cost)\r\n            }\r\n            else {\r\n                setUserEarnings(userEarnings - cost)\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const getMemberinfo = () => {\r\n        var playerIndex = 0;\r\n\r\n        const leadSwitch = nbOfRounds / teamInfo.length\r\n\r\n        if (roundCount % Math.ceil(leadSwitch) === 0) {\r\n            const tempLeader = [...currentLead];\r\n            teamInfo.map((team, index) => {\r\n\r\n                let tempLeaderIndex = { ...tempLeader[index] }\r\n                tempLeaderIndex = team[playerIndex].socketId\r\n                tempLeader[index] = tempLeaderIndex\r\n                console.log(tempLeader)\r\n                setCurrentLead(tempLeader)\r\n            })\r\n\r\n            playerIndex++\r\n        }\r\n        console.log(currentLead)\r\n        teamInfo.map((team, index) => {\r\n            team.map(player => {\r\n                if (player.alias === alias) {\r\n                    teamNumber = index + 1;\r\n                    // if(player.socketId == currentLead[index].socketId){\r\n                    //     setisLeader(true)\r\n                    // }\r\n                }\r\n\r\n\r\n            })\r\n        })\r\n    }\r\n    getMemberinfo();\r\n    console.log(currentLead)\r\n\r\n    return (\r\n        <Box sx={boxStyling}>\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography gutterBottom>\r\n                        {alias}\r\n                    </Typography>\r\n                    <Typography gutterBottom>\r\n\r\n                        You are in Team {teamNumber}\r\n                    </Typography>\r\n                    {isLeader ?\r\n                        <Typography gutterBottom>\r\n\r\n                            You are the current leader\r\n                        </Typography>\r\n                        :\r\n                        <Typography></Typography>\r\n                    }\r\n\r\n                </CardContent>\r\n            </Card>\r\n            <br></br>\r\n            <br></br>\r\n\r\n            <Typography variant='h7' color=\"text.secondary\" gutterBottom>\r\n                Earnings:${userEarnings}\r\n            </Typography>\r\n\r\n            <br></br>\r\n            <br></br>\r\n            <TableContainer >\r\n                <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\r\n                    <TableHead >\r\n                        <TableRow>\r\n                            <TableCell>Defenses</TableCell>\r\n                            <TableCell align=\"right\">Cost</TableCell>\r\n                            <TableCell align=\"right\">Submission</TableCell>\r\n\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n\r\n                        {userDefenses.map((row, index) => (\r\n                            <TableRow key={row.Name}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {row.Name}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"right\">\r\n                                    {row.Cost}\r\n                                </TableCell>\r\n\r\n                                <TableCell style={{ width: 160 }} align=\"right\">\r\n                                    <FormControl component=\"fieldset\" variant=\"standard\">\r\n                                        <FormGroup>\r\n                                            <FormControlLabel\r\n                                                control={\r\n                                                    <Checkbox\r\n                                                        key={row.label}\r\n                                                        onChange={(event) => getUserDefense(event.target.checked, row.Name, row.Cost, index, row.DefenseID)}\r\n                                                        disabled={row.Cost > userEarnings && !isChecked[index] ? true : false || isLeader ? true : false}\r\n                                                        checked={isChecked[index]}\r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </FormControl>\r\n\r\n                                </TableCell>\r\n\r\n                            </TableRow>\r\n\r\n                        ))}\r\n\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer><br></br>\r\n            <Button variant='contained' onClick={() => setEndBuyPhase(true)} >Submit</Button>\r\n\r\n        </Box>\r\n\r\n    );\r\n\r\n}\r\nexport default PlayerInterface;","import * as React from 'react';\r\nimport { Box, Typography, Card, CardContent, Button, Grid } from '@material-ui/core';\r\nimport { Context } from '../../context/ContextProvider'\r\nimport { useState, useContext } from 'react';\r\n\r\n\r\nconst GameInterFace = ({ rolledAttack, attackId, pointTable }) => {\r\n\r\n    const { selectedDefenses } = useContext(Context);\r\n    const [points, setPoints] = useState(0)\r\n\r\n    const boxStyling = {\r\n        m: '20px',\r\n        p: '10px',\r\n    }\r\n\r\n    const handleChange = (defenseID) => {\r\n\r\n        pointTable.map((item) => {\r\n            if (item.Attack_ID === attackId && item.Defense_ID === defenseID) {\r\n                setPoints(points + item.PointValue)\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Box sx={boxStyling} >\r\n            <Typography color=\"text.secondary\" >Points:{points}</Typography>\r\n\r\n            <Box sx={{ m: '30px' }}>\r\n                <Card >\r\n                    <CardContent>\r\n                        <Typography align='center' variant='h6' color=\"text.secondary\" gutterBottom>\r\n                            {`Attack rolled: ${rolledAttack.Name} `}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Box>\r\n            <Grid container spacing={8}  >\r\n\r\n                {selectedDefenses.map(item => {\r\n                    return (\r\n                        <Grid item >\r\n                            <Button variant=\"contained\" size='large' color='blue' onClick={() => handleChange(item.defenseID)}>\r\n                                <Typography variant='h7' align='center' color=\"text.secondary\" gutterBottom>\r\n                                    {item.defenseName}\r\n                                </Typography>\r\n                            </Button>\r\n                        </Grid>\r\n                    );\r\n                })}\r\n\r\n            </Grid >\r\n        </Box>\r\n\r\n    )\r\n\r\n\r\n}\r\nexport default GameInterFace;","import * as React from 'react';\r\nimport { Box, Button, Input, } from '@material-ui/core'\r\nimport { useContext } from 'react';\r\nimport { Context } from '../../context/ContextProvider'\r\n\r\nconst LobbyInterFace = ({ children }) => {\r\n  const { setLobbyId, setIsInLobby, setIsHost, student_join_lobby, setAlias } = useContext(Context);\r\n\r\n  const boxStyling = {\r\n    p: 6,\r\n    border: '1px solid black',\r\n    borderRadius: '10px',\r\n    width: 250,\r\n    align: 'center',\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n  }\r\n\r\n  return (\r\n    <Box sx={boxStyling}>\r\n      <Button variant=\"contained\" onClick={() => { setIsInLobby(true); setIsHost(true); }}>Create Lobby</Button>\r\n      <h4>or</h4>\r\n\r\n      <Input type=\"text\" placeholder=\"Enter Lobby ID\" onChange={(event) => setLobbyId(event.target.value)} />\r\n      <br></br>\r\n      <br></br>\r\n      <Input type=\"text\" placeholder=\"Enter Name\" onChange={(event) => setAlias(event.target.value)} />\r\n      <br></br>\r\n      <br></br>\r\n      <Button variant=\"contained\" onClick={() => student_join_lobby()}>Join Lobby</Button>\r\n    </Box>\r\n\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default LobbyInterFace;","import './App.css';\r\n\r\nimport { useContext, useState } from 'react';\r\nimport { Box, Typography } from '@material-ui/core'\r\nimport Layout from './components/Layout';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport HostInterface from './components/HostInterface/HostInterface';\r\nimport PlayerInterface from './components/PlayerInterface/PlayerInterface'\r\nimport { Context } from './context/ContextProvider';\r\nimport GameInterface from './components/GameInterface/GameInterface';\r\nimport LobbyInterFace from './components/LobbyInterface/LobbyInterface';\r\n\r\n\r\nfunction App() {\r\n\r\n  const { endBuyPhase, rolledAttack, isHost, isInLobby, inBuyingPhase, userDefenses, pointTable } = useContext(Context)\r\n\r\n\r\n  const TitleText = withStyles({\r\n    root: {\r\n      fontWeight: 600,\r\n      color: '#088F8F',\r\n\r\n    }\r\n  })(Typography);\r\n\r\n  return (\r\n    <Layout >\r\n      <Box align='center' >\r\n        <TitleText variant='h4' > CYBERBLOCK</ TitleText>\r\n      </Box>\r\n\r\n      <br></br>\r\n      <br></br>\r\n      {!isInLobby\r\n        ?\r\n        <LobbyInterFace />\r\n        :\r\n        isHost\r\n          ?\r\n          <HostInterface />\r\n          :\r\n          <Box>{\r\n            (inBuyingPhase && !endBuyPhase) ?\r\n\r\n              <Typography > <PlayerInterface userDefenses={userDefenses} /> </Typography>\r\n              :\r\n              rolledAttack !== \"\" &&\r\n              <GameInterface rolledAttack={rolledAttack} attackId={rolledAttack.AttackID} pointTable={pointTable} />\r\n          }\r\n          </Box>\r\n      }\r\n\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ThemeContextProvider from './context/ContextProvider';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeContextProvider>\r\n      <App />\r\n    </ThemeContextProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}